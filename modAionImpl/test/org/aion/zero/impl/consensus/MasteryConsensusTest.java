package org.aion.zero.impl.consensus;

import static com.google.common.truth.Truth.assertThat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import org.aion.log.AionLoggerFactory;
import org.aion.mcf.core.ImportResult;
import org.aion.mcf.valid.TransactionTypeRule;
import org.aion.types.Address;
import org.aion.util.conversions.Hex;
import org.aion.vm.VirtualMachineProvider;
import org.aion.zero.impl.StandaloneBlockchain;
import org.aion.zero.impl.StandaloneBlockchain.Builder;
import org.aion.zero.impl.types.AionBlock;
import org.aion.zero.impl.types.AionBlockSummary;
import org.aion.zero.types.AionTxReceipt;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * Unit tests using interesting data from the <b>mastery</b> network.
 *
 * @author Alexandra Roatis
 */
public class MasteryConsensusTest {
    @BeforeClass
    public static void setup() {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("DB", "ERROR");

        AionLoggerFactory.init(cfg);

        VirtualMachineProvider.initializeAllVirtualMachines();
    }

    @AfterClass
    public static void tearDownAvm() {
        VirtualMachineProvider.shutdownAllVirtualMachines();
    }

    /**
     * Block <a href="https://mastery.aion.network/#/block/255652">255652</a> contains the first
     * bridge contract transaction on mastery:
     */
    @Test
    public void testImportBlock255652() {
        // data extracted from the mastery network
        AionBlock block255650 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d018303e6a2a079091b407ce38a1efc9e047c0e2cf4ab907965eb9a24060afff223d9479c3290a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a03961230ff5f8381b13060da87081db859b9eba1c758331403c8bab7ca3a767c1a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0ba041494f4e000000000000000000000000000000000000000000000000000000008083e4bdd1845b7d6a63a0c1c2b719718c49ce0637d4a3ae95c7d39d9b09774a0a1abe777cc0783b828bceb9058000039cbe2060a8132fb30329dd3e6432931a2c0fd474178725071ac948bffeb2f02a180660e884162b6b69c106ac315f688a9ebf38e02b151600952bfb19affd17060cb50e94d7cf75917e15766c0cb2013516e1997065110c65972bd95825f6e15ad71e5139402075d1cf2490bc1b1c44dccb3595479d22829335d702549a89c132a68b1930b6fe6a285cd5b3480825e90f721ae6bea5fb0c011c392f40870c9cf1b32080230849c532e4985f9cd38306730e1b5125fb5c5ba1d7356c5d7384463b22223cfe09656d576617fb7babaefe199ebcf768fc32bc3b75852635e92ebc7444b0e355e62b8b1a3fde540f85204cd03290c0e54449556667f5dd7bfd6301635b089733e7f2085e77fa483638effec7224eea9dea5b65a7ed97e2d1495c4541cd67b75c328c7157ed0bfc014982636efaaf0e25ad7c5b2a0516b58cae4d5f066ec19bcb9b78909f7914925ff11ad9a0f3d6c69b35d7382e4bdd75b7d1a301d0402b94c7140eed629c06934615876750913a842120a760baa91372a74e209d53caeafcc037fb183c57fb03c9574d3cac4d5d3d89372e61c15f22992a2bef6e53138851428e37159bfd1ce42ec416056f34a178fffc6c06d03cc0eef495396eb675113ee09428440fc9391b27358dd6eb1b764b9bee61bb891dc6e159dc5fa7fb39d554527b31a7cfcdf63f39cb63d7be1ae3568e6e3e6dc25d3d8df890ee08f43f1167894edb7198fe32ce3d3928067e6a91f0b3bc3efa29921d9e8f8a68d374ae1d14131dff233b35f463f6b0002221bca277b7ebdf906fb24d0b6c656650c3441357ce933bd5a9969c241b77349f412d5ab6654c5ba2343051b63af9dd4c0a43d5fcdef6920938be2324e470dd560a3048d09142e5957c816bec8427dbefee873379857a95a66b2e83748b378ac632e6fc0cbc23c034f0e9528550eb49562720901a184c7077031af081d6af16f4e822fe3123e698d5ac6553ceb4a5e0005a153514b389f2f99d0e539bbdac2fc85fc76da7f900e5665790791705b9e7ea28be95e8721d23ec3c80310bc0a07a2931acd04d65f254bc2b24694a1d24340c8c491776f66f772236e24e115b7896b43fa9f137f4440f00acbc4c993495529d10b8073311993b14d44d9b92c827afa319be88deffe9ca0c34b46d4f82f5b8bb3cc62408427b98826545f76166e45c0ab19f48396332b89f8020436482619c372db4f92dcb2003f2b3fe888fba4e5100a4e3d5edb77137e35afa2c2dfa853b5807ed61c7f5147a69d65ab49d2974b960a7c32f5a50dea1527ea0142eb8c90cf90686a89f868765775e27b23746c2bdaf3945559e5b90a486fdf3f4315a2cd71bb45bb86d3c4c27053b9ebb90c7cbaa2c368f408c93298f8da7c7bc7bf80e84670bc63122d8d5576e19f5562f4b8b1386aed5e205a6b88e8fa78d133fe06a097b82a115c3e52894c90114fc3bec5082c08073aafe1fe292026832895c9b45c0025dfde549c26e9df729960d2bba312ee32a686ae87f12f979044f747d28e6aaa239a91793021b3df5759c0b0fc151efd0e34525e81cf439db4bd27f73ec3eb414f23604a566f4647c6f6567939e2e12a68c7afa3fb7e88202edfbf13f926e8f27bc5c1fd248c1175311a3e3a6ea34b58204ddd3efe41133be5b251f7521fb258f3ba3f10e42e6f787a2924ba1fccf13b8d9e893e701a23c325e0f1aeb836da9fe11755ed31bdba65629875e972d5014049f031c63234a0d4dd95a4357a7e07906ed819e352714eca474c3d2537f6013e4277c89aaf023fe6d7488f90a410ec226c8a9d32f91fc1be9d9186563622f317a3f195e29157c1ebad5fb14ed6aa7b2cdcd872d4d7eba88125f3253842acc18ad7723595909d83b35cfee78ddb747d4cd2c2236686e5dd7424c487e5d55dc4699f6be4d3c7cd9cd4bc740ba2651804e2243479f1c2e7eb8acff5a9bfb04c727013c5ec7d85c970650be0cd91978eafec0"));
        BigInteger tdAt255650 = BigInteger.valueOf(4199115);

        AionBlock block255651 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d018303e6a3a0c68dba85e8edf42cc3cfc265a165ce589f84a59a5ab7adf4a7737c85d634e050a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a06bb3257ac1ecf01f6c70495851f4833eacb847659df8e2186d5d2331cc8d9622a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0ba041494f4e000000000000000000000000000000000000000000000000000000008083e4f700845b7d6a6da0d3348ebe66e1c2a3d5977daea6e638a8d5854f915a82136d910146b12bc237bcb90580000fe1148c4a970d2f3e8f3f879ebb60ad4253f6c2e431e361126344000e34b62a3947f693e565d90c302703010d94b8792b4ce87a17862d55e9c198c44b5ca91ca533081b96e4aad0d82d5b0b3994abbf7be7d21dfc3c4e0ec752acb191f171cdd1711665a1df7898c0622891220f7483632cb53725bda406105eb78dee11a42e9e8a8a15f8e7aa4a0570ac27e3b51fb40bf65606399033769a33d35f0217597230f7441693ee0358908c6b2cf5dd740087746d2abb72f3bad2d27f6ed3323118c872263e51104a7aa76642f79ebae3496f6e4dd97c89cb3071a3511d50a4e83d927ae72d94a93fa033ca983b85233042713a27f1743f4994c56cb15c77d6d75a3fdbbcfb2fe7a50fdaa33c2444931cd5a51430f333043c93cdedee209e516f3ac4b2b535313b3acf81933bb72e2d9e40fe0d34227090e6505897fdf08b1d33e755be3a5470b8ab00fb3015854e3118ee977e94266f690261a69a8751f155c20073960a18573fddf2cdce0e7c103a5d5dc8d9796ef90e6f8cc7666c7362fb46a81cba1d1e45357eb1e77cdc25ae7610d1795483f0b25d440ed2682178b16eb19d66345621f249c8d886a77b5434f98292d5a6ed18ac141b0420e908fc02109759d8a00659b30741313e03b7315940955d377e0538f9db46304cbe4dfcde366742783d03053dc8bf64055a1476483c0dd7ae296e2323f87c2ff11b6e8a6b20d64f47efebc6801e4a9083dc49657e66f501dc5a62effe95cc3b832d13e65b1a389790af7b32a23b1c4d7f0325b11973457a9fe3838e076a3492f65eb80798c32e1eba45c9aa761180254232a77af4663ecc0725a3acb026c494dbd878db330c1fe79a08fd34b17edb1097eec6d7b1c17a9012a844539d1e469f9aaf7f9e4d1327b2fc5a5234bb6a558a4e5a061a1abc950277e0421277ad5f90e4027930087b3bacd58a4f1459d69e02054268ea3295153d7a31b141b8ec8348017ba1053bb37500bbefe91ffcf9b1b77ade3d0875a5f2c84dd8fa55b2068f475a2f33d877545bc6414c2d68c64771ac7b0113068890a040c25b26d27d6541c01609a5093f97e725de0da3af5ccbe7cacae2d2b662508e0984866fe7754ec902e56a937256e461293b802d1760f548cc831b339d202a1b25553d252c1416850c32c8f1ae26438d78679435237493cfb61bafbf74d5e424d2334613e5b1da795dec43c037de1c148ecbf870e18ec62720ee28ff6f66509003be795b933e8b2f7cfa561e899ad5b0185be723b67421840efd86c4d89673e8b2438386b32158d273f8c9513e4d653bde073e5d224b045c425f3ccacb020379d975471fc62b805cff3bf5b25c5d5def86fc26f8fb72664f05bf2e571889ecbd374c1b34c8b696e4cc0a7c3e5cd35ae2f68e4357c579247fe4a18c2697edaa60fa72cc2b0893836f70552ed832db560902190043ad69d4780ca9226181c83324b3b9b5898130ded2af5535f9647680fd015ae9725e00becf3f61f30c99720c5c9640955ca835162717bca7362830df40bd1c1feefd7a48769faeb4b40c9346db5c93319975d1934190013d90f9773eb3c88f41f9af26a33a888a7fa6a24cd5472b6c8539be9a56730385b5f8893256b56aa2f536af7ad9b8d4a63ce1ee8008804728640ccaacf38f1553a501574a7b65ccf67286086179820060e5be2f0d09809c372144889dc27853dc2c97656b8ca791663c07a272b547b93859d505b8f49504175f02f6d52491a0658325e7b31a29532106abcc16443f4d892a052d82ef50b27df7a6e0537bef65701ca716ad7e5ca2a21d2fb892122fa1d2a1ebb6b695b1115325e80e6e56933c3a68205d3c1942bac659b1726c9e6a0a9cd55a026179a43aa54313a862c75762c94be85a2114d2fa3db8c4660f5e3d7189caf78f8beed2937f9a9817141a4add17b423af755021223995f2633680e6c8fc184ffc78d5a43345d969205e0fdaa420e9d93fba27adc0"));
        BigInteger tdAt255651 = BigInteger.valueOf(4199133);

        byte[] trieDataAt255651 =
                Hex.decode(
                        "f908b2f897a03561d92626d7acd37bc985c7176fc845ae1d876ad6bcd99756ba6fec30ca3573b874f872a020ababb7fc6699d3178df12ebdd141b095ec0076586b8c4d4fae7f5a563c8263b84ff84d01890180446bd24f656000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f898a0fd402a3f60772cb69eab2b98211715892642226a4f4470b4ca409282feaa6148b875f873a03f34ec94586099470869e74064bcfd4747cbf5864e72a5966f25e4a3d32b1bb8b850f84e808a152d02c7e14af6800000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f845a05386c67c941dbca06b7102bfa15a75ff84416e68319d8fd17c571a7dc71d12ffa3e216a0fc73fb16f40138d1a0e84d81aefeb897da1693fd943e26088ecc1ad6cc770560f8f6a06bb3257ac1ecf01f6c70495851f4833eacb847659df8e2186d5d2331cc8d9622b8d3f8d180a0fd402a3f60772cb69eab2b98211715892642226a4f4470b4ca409282feaa6148a05386c67c941dbca06b7102bfa15a75ff84416e68319d8fd17c571a7dc71d12ff8080808080a0beb637c787490ee23d2946583d43a8cd6c444d05e9f2a3c64ff1e38eca50b40f808080a074dc43c8dd9d4be02ffd8dff0ff7fc240136bc27ada45cf38e37ee069b52b4c3a0fac91580acb88359fbf41ccedad5addf8d5aaad9327f15da87b1e7ff60e4f31c80a08044eb2b9ffb917591b14cfc09f5d41ae6d9abdbfdf3a369a6c6480d5524d0a680f897a022bbf941b5b0ac42f58c8e5f44fec0d59663114448655e4b0ad45af8b713b44ab874f872a0200a76619d1898d7265ded662bdf5b10c9df8d2ab8b73d18872929b781fbecd7b84ff84d8089740186c333383422c9a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f896a0fc73fb16f40138d1a0e84d81aefeb897da1693fd943e26088ecc1ad6cc770560b873f8718080a02ca1e2c8c83220e39798af4cb90818a5b5707d62bd29e241aad486a1d282fb7c8080a08241e5823bfeb4a2cea2723f61af7d791b3196d49cbdc4b560012d4597ebacc6a08f14e141468950801dd25cdef983a4cce8f5578fc897ef6816e881446c59147680808080808080808080f88da02ca1e2c8c83220e39798af4cb90818a5b5707d62bd29e241aad486a1d282fb7cb86af8689f3c9c384cf112b1e912494855d1116041a2bff4882321627af7d872dc77463cb846f8448080a04a435027d518cfc80088380b12468c5a53fbe0d669c5a471008558df81f1763ca00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f88ea01718b04fa8c28bd5159e183827b0ee227590fb3d28383bf0d4a167d5594416aab86bf869a0205ff8943e102428313e141d414bda168a65c16f3a7b75e9cf5ccd5702cf7a66b846f8448080a005fd02342b56544ead95ab1e477b0baaa70f75b109b23098a84b67bf52c25deba00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f896a08f14e141468950801dd25cdef983a4cce8f5578fc897ef6816e881446c591476b873f8719f361fcb81bb95f43debaae8999fd36f79786d6a7b9e6aa51297de65096571d7b84ff84d8089276fe409db2f37f37ba045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f89aa08440ae2e1c5820a19962771a4a265e29a08ae8433f213d836f109057b6722d1ab877f875a020955bfb84f3efa2043bed4bfa90ff3cd072b419b3f601c8dc930f6029e9c171b852f850048c010391b8b9a85d52a4cc6000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f897a08241e5823bfeb4a2cea2723f61af7d791b3196d49cbdc4b560012d4597ebacc6b874f8729f3f2af53c805b6b31dbb9ad5a5cb4a3f89961fffc76ae93e3575d2688260d71b850f84e808a3befd747b9966a597102a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f876a0fac91580acb88359fbf41ccedad5addf8d5aaad9327f15da87b1e7ff60e4f31cb853f85180a03561d92626d7acd37bc985c7176fc845ae1d876ad6bcd99756ba6fec30ca35738080808080808080808080a08440ae2e1c5820a19962771a4a265e29a08ae8433f213d836f109057b6722d1a808080f897a08044eb2b9ffb917591b14cfc09f5d41ae6d9abdbfdf3a369a6c6480d5524d0a6b874f872a03baa19fd2249424c6876a14b4e1313aaaec2776dfa5b51c7169658ab3c03b8edb84ff84d0e8901e9fd58efa8625000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f898a074dc43c8dd9d4be02ffd8dff0ff7fc240136bc27ada45cf38e37ee069b52b4c3b875f873a03159efc25eac3a247b2e85333234f1a984e5a026618911c65ffb1debe7d6c099b850f84e028a152cf4e4d8a795e2a000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f876a0beb637c787490ee23d2946583d43a8cd6c444d05e9f2a3c64ff1e38eca50b40fb853f851a01718b04fa8c28bd5159e183827b0ee227590fb3d28383bf0d4a167d5594416aa8080808080808080808080808080a022bbf941b5b0ac42f58c8e5f44fec0d59663114448655e4b0ad45af8b713b44a80");

        // block to import
        AionBlock block255652 =
                new AionBlock(
                        Hex.decode(
                                "f90836f9078f018303e6a4a0d09c3970f17ba0e2b0ce87504ab63b32e49ebd6b1dbc426ca3f02d2a131675dba0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0fa81460e89314a8c61376a97d8600dcab3ab257c2979bd00bf72acbef65f5111a04467e38380e1b477ae071597c371449ae14b63cac7deb37b4d6799e3bd23418ca0dc9c736f63cfc0deb0ee64c760ec8c88db5392dce951b0328b374fbcd5d91fbfba041494f4e0000000000000000000000000000000000000000000000000000000082a51083e4bdc3845b7d6a7fa0d8eb38888fb26fca1221fae985bf417f79e60646664de9e61db03d74dfe0cd43b9058000358d400b257d343e760b641c32ff1b5ad3a1ff277c02bcfde7ddf233055864a0099c3b906c8a378d7833d0026dd1755ae4b5a2610d9a639d2354d90c25ddb4e994063c005996b60803b6face61278f748b786c55e318140669002bdb29e76a6ae24062ab41ee57d8001c68bd37316617c1f584cb683e7b979c60eb191e0d5c163fb15a13efdff746a944a634a6253c94bf3d62777a78230cb6341381ad6c99be7facc55648b8934c7796699d5eddec0265d4c0b098339f651b0a140d41424ad1eab7dfed2d24012930a062e4e734945d2a2fdf8d57a5f3d97ba8b606040f8acc88dab9a4ee49217b3f03649350aae803d41cc6ce80d4faf00a3c2f3a3e8f455f110688c0f6a516109ccdca75a7e8dbe3a8ac39ca4f4d6bbb2abb7f26a775555745ac9a2060af4708821cf6c8b85b8072b7f4a21f693dcf8525d30d2891a25464fa4781f6e0211c38902c43e6298405f7ad6759f35343dd63dd0684515e6d470045f034ccc13c6ac9805b182fbf125964307b5540a204b0badd84c68ffe774a9d21758eb813e30b9360873503071593cc03e3206adae305315e49706abb8679c6d368a2228fbfd6b735374a4678497ac54678506e2f66e8113344b4b5e58a899c611740d6e20db1c41a12eb7e981b45825509138e2eea2b4b588402927bf8bbbd6a550915961ace7c746f1a3f598016aec922e664cde15d536e4588626a2a9a6b472ef76c5d2c827569bfb8b23f9ef6077ad3c4ede674d2a69bf70ef7c7d09cdbcec233b6e30dda8048bc5ad3feb0850d6cc88a5f6e7904cce7cbe12b6c96caa99785afacb83a7c6cce72618c3acebd5fb43abf9268dae6b394afbf169133c2df8c693f4abd765615a3f68346662b6d9915412e7ae347152cfcb139345d273ae4cc46c62fd869ae306b19c79ebf58a033a91acd1daf2ed796b72736fc388d42a2653e9686a487642a9727c887e96d08bf6667c6ad933236e44cbe1a76bbd3c7005fb8929e20784de2b5782ff73d5d7a5386fe619aff0ac8c10ff9633623f7b04f170c20b91ef9188cfce47d16dcb19728e318c4ace659281a41de9d755e5926f2f147027ded0cc5b17bf83c2771f0abdc2f3a45ee7a73dd13652cab2d96c858271edb5ca221bdf6285620b20ca513e1e8955251b6d7b6a1fb16be1f0a58e877b66af98e17f650fcf6f28e3f8b5d48261d6e826577177523ea172a10ffa675695c5c310b473e1cbea9ce54661e30d94709099cadd5bb6a5bbd7f6b50832d98bafd061779ed360b1a1626111115be3793063cc5330b1c0642f87eabb30e00d6fd2452b2679270bd1bb928ccb512bf89fbf91e101d4df6adf35a1fde0f681d7665bb93dc737b7697d6108e3b7061e17ca75aed8d25cd41c0d486026e6fa73a189e7b0b8ec54a71ad107924fe12e8b3da8fb83eb91941cdc549bc36abd439389c7cef3f1ab7492a03e8711f44b27ebb58547220dddcc4b1dc6349a49de1a0bec1c40408d67c5250c3e4b9572695ad0fa36eda11547076a00e757c44fae4be5c3242047477962709894e70ad9eef1eab1fbaa295ca981e0857421425364736b8196c9482321b77eb7a6466f72bda3b5a421da941aa4de1359828140d5340aba14684c9ecb615b2724061c4b0b824fc663b833b9edcc797a0310bc45748f70baaeaaf5534603817a2bb76256c7029325b59980fe2a6f1ea92652dbe20579149f0016b7d6dfac0fc6ef755c70f595800a75cc1054d364dd155277ea287e8470b237aa38c86d43a0851382de5c01e6639fc205c8c5c2a8fb98d78076a715b1b2afa9148bd175b12671d7c585fd6c02629e9c8ed514d38d1fe1e4d4bef6efb2fc03ec5fe65bc09db2fb6e3810604de46ec9b4062f2c1b909d5f6fd69359afbe284f34040e27b2d37b9186efdcfa60903a81ffaffe5aceb60064938ba2e7d98cab7c644b428f798de6ec2403d055e4d948b7530559278e2796f6e45d6535bbe4b5d7b531ef8a2f8a000a00000000000000000000000000000000000000000000000000000000000000200008479ba50978705740672392de8831e84808800000002540be40001b8602a80540535d30c63024afbc491efac24f40ccfbc5c81bc1babb81bcb8da231661d7354a33bf644f3a8569e18389f3aff5911192ca5accf2bce8c98a9540a6ab1098b9e0bb86611e11e5cf067401841b1c7c646dbdd5c38efb1c10228eda14f0b"));

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block255650, tdAt255650, block255651, tdAt255651, trieDataAt255651)
                        .withDetails(
                                new Address(
                                        "0000000000000000000000000000000000000000000000000000000000000200"),
                                Hex.decode(
                                        "f846a0000000000000000000000000000000000000000000000000000000000000020001a00251c8e62e0ac02f0bd4d9f2e786e65f4aaab627c46f2a6aca6aa32055d0c1ba80c001"))
                        .withStorage(
                                new Address(
                                        "0000000000000000000000000000000000000000000000000000000000000200"),
                                Hex.decode(
                                        "f9020bf876a0359d315474b06a3da0342531f4e30331aaf5d45f42a3ea4de00157bc46f0e197b853f8518080808080a00579563dec924478bad405984207dbc957431a3a39a15ae4298052fe29a3a9df808080a01f6483962c4706b81578f451b998dd66f71dae6876ad0d477dd14b12762c48d480808080808080f868a07aa7374e4d3ae18d1a6818a2a4a254a2ae4d2eb312c714d8c9045d9deea23e74b845f843a035c749bcf708d70b69d4d2f4ebd726038bcbebf9ea7ce8481b6acc1e12014e4ca1a0a048613dd3cb89685cb3f9cfa410ecf606c7ec7320e721edacd194050828c6b0f845a0eefd522785c3bc1f41e83e3f6b55c2960b9fe022185d4a4c7c65255705b3defaa3e2a020bcbc2f082f4a7561a5c1a2cfd3353274a2cd5162cde722a9a8b3b8df0c7bfb01f868a07e793d9c960a9dc3b49ed8b369135a164d391af681a5ad5a52ba3d51ee08a916b845f843a020c1c088cc9453996779630ad3af45cbd92814828dd784cf2aa12df95d1b8afea1a0a008d7b29e8d1f4bfab428adce89dc219c4714b2c6bf3fd1131b688f9ad804aaf876a060bae2e58defa34db5c4e96b5f3d520d0e139ae15dcb437b9d554471b12ddf7fb853f85180808080a001a75cef37a238361422c5898fb6d57db4372e7faac3e366b23e323229093ebd8080808080a091233354246b19eae15423058df04dfdf291d4ab333b04709ce12a34c2b24951808080808080"))
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block255652);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.isSuccessful()).isTrue();
        assertThat(receipt.getEnergyUsed()).isEqualTo(42256);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "9e54adf6b73f759068f1791cf62f05c4a09ea80c57433b052b258093312cf492"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "fa81460e89314a8c61376a97d8600dcab3ab257c2979bd00bf72acbef65f5111";
        String expectedReceiptsRoot =
                "dc9c736f63cfc0deb0ee64c760ec8c88db5392dce951b0328b374fbcd5d91fbf";
        String expectedReceiptsTrie =

        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));
    }

    /** Tests importing block <a href="https://mastery.aion.network/#/block/365432">365432</a>. */
    @Test
    public void testImportBlock365432() {
        // data extracted from the mastery network
        AionBlock block365430 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d0183059376a0737cdda511e1eb5567fc3eea277c91697c3d93453238018e0237bd5b3206fc88a0a0450c4333e72ed26552d7462c0b3669924eec816a219b3960d5b3f0b33f7444a0106dbe7bf85d3eb52c03fd0e7f89fdc753c4d767470b442ba510df97c6291793a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bea041494f4e000000000000000000000000000000000000000000000000000000008083e4c999845b8e9a34a007eb2ced7d672107372260b1b0b9dc7106f82115809fb015919ddb6c3309871ab90580008688b89d06fe296d803d181b13384cc2e74029ba060da3b67372822eafbfe4695a0729bf28c66b132b4de61bdf9ed13548eb71355b5036e67a72cb0524efff2768437f5d25b0197bb178ee40bea13bab5a8e46f47e31d7053192583a2271a7505ff91a1dc74504270f312c8f300e3032a2b3caf2f476bb0c653043d4383bb8cc3d15840affb47181042a1f3420b5356faeb5b7041cee7f5e0c0d2cfe65be3a528e7d71001753799c5028d9162a68e9029a3824e6528febffb9da75d97b71030c27497d82301732d30a2cc26622998a5a2c9aedf40135c1a4f9ae3b0be94db37d73dc07642acd1fed822983465a7fa9906f0f7f3ffa4165486d98a0cd852dab6ceb992c4936416a0351997de9e46b555cb5270c0d12367915de6e212b72235ce1d8be54943c5bebfb2dff0bef8febb01db04e28395ffb7cb38bf624bf4ad93c12cb7818b684fcfc71bd5999e283184862d1e999577de38e5f3bab329f37162d04b0f31c4795807c7a90895341f7d1aba97e6670d3d70657794cf05195128e15426f7eeeee29dd20ad387bb20a4706a0222bd3d13325b24a8dbbcb0a07d168391ea20c7a7b1a1b267491a185a02008deef5f1b1b63b09eac149311c053e32ca5d47767406177873db81dedb8367921cab4d622f77d47e7aeef35d899e32d8641d2e48e822c36e615fbd60b553266bc2d0c4a075ed7ab89e5d3dc4aa913984c2b51f036f289af900bf87c7b6570fbbcf8071220cc14b1aaceec2476668caebf3e9a01be7cd8190ad53b4726d0ed02dc23ce37d767f7ecbb621278edaa106a9efa3ab39cf4f8ae364b06f55e20c514b759a30d22334f3c698957e0ad9c6063a337ebc869454534466d08944e1485ba40167387f033bfa5a406a8e9b924dab90f97cc5e1d5100fcfa0bf54032efc66215b59e37065110b7a461b3c2456be1d7051fc36a49a587831236c3b226487b1521f41c11a96ac643bddf4282fdb22a7c75400180a512defe27307b0e780634ca2d666c14d9346d0a0e1767582ef10f792f858037adc21733476716ee08a3057b957ade82f074d724696a6affb7cea8f04a37f28e10add261527c9df07d5dd74bfcfbf061181d61b512430ed52114e86315a96668916f5cb9e47ae7dfcfbbcde91fb1a2c5c3d64b4dd96b6834fb819015e53f5ff397ed17d4ceeae738ca587f41934523cbd2ba180b922c295525c3bf3452eeb8907cf8f45f2a2a9c1f481d983d5014034c3681c712342610412350391579758d03e57758b90386d3853587f906b4dcc03f4bb58bab38cbc8a5715a1ee83dd73a44b7389c758121ef8202952652d35a38504544d74035870f8df971635eaf962e764b62d33c02f405259b733850e041281b73aa2c0fd0941d5ea97d9f1c4131c7d2e456975ba8bd875889a69f6e6966937ad6a33181f68e05ac8cf0bcc2aa49f8167ab88625d0e718a13419d0eb7bd407cf74354e96b7c6d383ab543a360eb40358b7323b33819158b2910f6115795bdc3ab03781da3794cb7679ed5f247b1fa574724b580718405b7575580adfb24e693c354d79dcc8712e99f7b6f75fe362de8f4cad25cda5de51bc397be782f717e3051ce7da386ff903bffdd240c63b422be1ca48c39e44b904debe62406711240ce64f59ebdef49e754bf8fec95d2b57543f2aaa2716a3ea3ca5356cfcf5ec6ca8b32587cd5cdeff69322cdb276d174463bf2d662e64fffdfdb25b18827829fc04a99b4eb7e164df594fc008bb5869479b4fb12eff9815e63ef037a18e31aee4d427206ef0a006eefdb4c57811e299157476323633d3d0770c77a0860a680a3fc85c1d85836d8559aa61a71e9b354796d648e79d84b23ed31e3962a76af2e9597c44902c12a24b9489c9f5ba0fe5355a8538a9ace8d439f2bb8dddfea5d10e20d53a64583ba2dfe366b88fee7e1f1150111a40986b6841edb0aa72804686c0fa9daf785ec1a7a3d30d9a1b2cd82f5179c0"));
        BigInteger tdAt365430 = BigInteger.valueOf(13722035);

        AionBlock block365431 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d0183059377a072a9432f16606a4df7e2e450a015cd51af62d57be35243072884c6ee86062b25a0a0450c4333e72ed26552d7462c0b3669924eec816a219b3960d5b3f0b33f7444a029aed00ad3e2a5fb5a9de50ed924d7890e48ca60fb0322ea64b8a6176dbb68d2a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bca041494f4e000000000000000000000000000000000000000000000000000000008083e502cb845b8e9a3ba056e2b9ee387d4618d55ef58a8fd9ab475b0568e7700e258d42dd2e4625b91f44b9058000d0ab52953023b6eae16d02bbdc6616e2d81c2b1f280692923add56f68cf84a30426d5771758661746d15b52dee16049369a83cb07a33682ee5ab6a5a18f833155f486861a585c6939a66848d51554baba6492a06ffb95e10661cf950dd04fbb46d02555b721d4836d6aaec5f4b12a983facf9461c1ed81ae3621928c28e4f1a4b1c76f256d14b21d4a81a9733ee13bea8972bee5b35f20efb52dc23a3e50083241a649075254d16973a9a35d2a579703c946d0c3680c39fb3f7c1032e9676ef1df43e2452916102d0ec28b67f979db1d52420f237d284ff671b8de1d9f0fa35ed5857e611d7e4753b9776a58f0dd3b901055ea1d5ba56714709ddb9457b6a5fb304741a2ead58b068b3c54b3679cd437daa92ef33e25cd56cc5bb6b7a62622e5050f932bef13129b3da65f46b9ebf0107969de16a600cb97a712ce76b1911ad31e54bbb85353b3c71c4989b1b96f6b80ceff597f4bd56a3f1ae5e189ba968c04f63e6378734980b924d836cb6f5acc4d4c907b9a433a5e0b9226047e096fb07c4ebba2b7a4691cb677c055440baf9d464a35a82f7b5d4f4bef1c4eb617927011e9458f5a82d7269abc5b88f345dcba47dd3a1e8e290b40184dffcff377a570313d0892b89b24e5f9f3e9f1c94c4306528b56e7610529a15ba7afc739403c351c37830550d3f3c623ec4a61fe11ed521fb2fcb1578cff1fb47e63ee5bb6fba75842b4f8badb6563c0a15ea80fbaae9a07ebc1bfa565d86fea4f2a18624fcc0fa35b717bffaa11902ff08f97fa5f332fd92aa16e79bfe4a61dfc21360eeae192cc66b48a5cc3baae242b207bfc23683aea753f0d659aee75df6869290163b2478684e956287684390ad07a3e69937d75a1e3ae0c5f57e0b55d8ff7beba771041105f6ef545b5a86dbf5b305ac18d07a5f3ab0aa60be918952281611bc694b031f180d2b8a6a6165c6bdc40074a60a56b848bb8858447e86f74bdaa423375a68d018ea3770ca6b9011c5a136a621a739747890d5f0fa81d9bef97f5a1ebb57b166941b476cfe6fa51902f3ed4111afd9e5ab2a14fb0dd031e1bd8e2e5058e6b39179f41c3b151e0b5a6f116f74a470cdf5904d980a4765d9d06f23992097109b861eb7d23e02a66a103f95cf4caaa430541530517fc857635196ee58edc68394b25acc43c130939b04d7a6c4431eef62b851107c0e3b6eeb9cbf424044e06d4034febf9b16d9b62df4aba1cc482b573ee0970e5571fca37cbaa516e599beb8d7eeda55ab8a2171afe4d16d841d041b363b130a289a4a548044fba78682d44c9ace0459f6df3f00e34a559ed3e2610fb9c56fd2ef53f0f6b5b6ddcb80d27505133a84e785f6b76cc030f3cc72a2285765de5850b7e3f37565de8879b71d3dd30714a96b5e93fa92835ea5b13c6a0d31c1751ff81eb18b4fdb1acc3b2e5e114c52370b9a9e285d559a761fa27823cd2a4e6bf19a38bbe57298de1b2fb67fe3a9982048db48d85e0a7581c91fd727cce2b9f28a548adf17a0fda48bafce838f766b74d5266f399fb2c7b05786b9320385d3fb565c5db3274366a39fb226fab2f1b3f485f237b28ad48176b747fce0e391f126ebbe40c815c30e807ce084c30f54b94a98efa3d38ade7e59ed62ebec5f1248272c4291445cffdaf8b55b75ef8e4dd8e7f79b2c311550ed588d51128b0697d302702c736ca684cba33151fd511f3acd532bea1c26d26d26288220769719dd4f00e3e03f0a0a5baa6751cb860efbb6d82af4e4fbe4c1e67648bca51aaf80d6c0e04aee377e3db7bf35f39ab0d13f3c7204ab8458f73cae825e96b0ef0a2e4b036ff9249867b1b9589390737ff975b17ea987c1b5c38b62daf142b9b4fcfad083dffe21660c681a1c9d63739a6be942754a16f6c7469c8b4e0fa666c1a2759d676ba7cd126293b894b937b53e03cd4ab36a887e34596585a710b8c44e2a3b4323f4e85bef43badb67317112e87fb7bcc35c0"));
        BigInteger tdAt365431 = BigInteger.valueOf(13722111);

        byte[] trieDataAt365431 = Hex.decode(hexEncodedStateData("masteryStateAt365431.txt"));

        // block to import
        AionBlock block365432 =
                new AionBlock(
                        Hex.decode(
                                "f90839f9078f0183059378a094c401109986a9d054ecc730a08572453b51dfd0bdf155dfb5b1188585187608a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0204b0b88ce011b0d3e351d1e1fdd6337338fb47d15401353e926ceb82d87efa3a044f852c7963f3c7e08c29979feb7adf9a828d73e215d355a22bc3142afb4edcea03c266609eb7f78264301a5aa138697b44d00dcc40bdab92a44d66ddc8f29c093bca041494f4e0000000000000000000000000000000000000000000000000000000082520883e4c98b845b8e9a3ea04040728811e02a0994d31b50cd69eece68a7f87085b0f937429bc80ab68204bab9058000a4cd21e9234ceb5ea9c43b0553768f53d4f125ddf411edeb2ae8e86d5371bdef5d79eaf0a5374d8eebc6d304d7fcfe72506e36cf6f2624ab6d235af4f962f3d85d0a2d32199af649adaa1db5afbf9f4b338be99db26f002246d534e17293f42afddb7dacc5ffcef91daf2d05612bb8f974b599b808b8a2b0361463982813c9a06e92be22b2d11db0289180b4b0638e9d33b32e0dddb1bbf5b1916b2e91473d4f1cf9d194bd001311bd4be9cdb5db6e0234def670a20d5bb8945510e37ffc939211cd6ce9b325c02bf49034c000aaef4e6ad825d7f46775c671fae01302417551b466bc2f422520e87f71a5ea9279703d3732966a97cf8bae3a7468cc402d5ea265369b95bd6e5708b986a65ddb737970a0b13ad6220d3ee680133c3e7f0ab1ee3ffd3361123fef6d483c2164d2b6763859e8a7396b97d1c1e7092774de933b93ca614c79d5a939bdb4742031d6604c5ef7f395b19126a73f903c39a5b59df800afa84cc9644674eb048010985f31a5f8b12dedd70b29c094e90387874c25f2d2617a6ba5bdfae1617cfeaa30a199f41a8841aa29ca2e688c71e026170446700e4f50fae23b96974f2e2dcce8a56e329d761c9da9377ff00110e1eba0c6a0e3a36e79036f2f8ae6639a4d2d60d64f4083c29a69560a2bfeb583aba35217f85efaf90a0c0d64c19f0f05c878a25f6851abb77d1d58c156b76c7422444b7d1b59d0753f082b462f6e298a4bc58abd43fc023d51a2ffc199c5a563a6377e62549df4cd7fa746182f25ed0fff2e3c2f7ecc2151d20a071f388916e40a390b3a649072d502df9d54a7303950fbfa19748da882db16c81fa592c6b4ecf2554a2f461e2fc5b937916645820b20efc970639ad03d370e4b4489a09789760e313911264837f56f2c37c3fc7a5754493f3ebb57f5ae37961332986a0f22a54730fb17244003e59bea3c099b76df12616a96c6681ad7986e5c5d8660663d8de9e14bb60f5101fc71dd87d5283077f2831e54f5e832c3caac9eac34090631a6e07c293db4a3eb264f2a4f2ba6174baf1478042c2235db9516ec155a4784d52385693d37057a1122126294b2a4255bd9dd504647472b14a17528599c3a6108d89dc2da632ed73fd37c7c2f428a945b7337719d073dfc77fdc5c5b505daa664860f8fa178186d48ffe3a727d1757e129554603fafc865df6772b28cbc28b529ad62c906927d0a288ebedea78de67767f34e2893b919ee052ab27de99c699bbe62766d218f72e6f7c935b63d1630e74cf71cb6c3cf242923908f2e6f902b8c6732f39d0ecc80d791c1ae1afc9ee417b18d167dab244db5c4341c1363eceab5c8436fcb7936442f0e4c846d696c35470afb9f1bb0649d3e3dc3a8362ee9a7106712fdeff4070ea8cc4bba984bfc7ae5274799e2ae85a819d37dbd350b007e2b34b564b0398f7b62083e28f877b1d2bfe0771657c51ee27bf3f57f22b62856f3487c934ca3ba0dc005c1cc6d665c129cf1363b07aab2b3d93ef8bfff8283265ad992ab177e53ae9c5e43a2e3ae9e2a3c9bbbf5210720829ba971698f7f68db1f878ba5c371fe5dfa63ae29796bd2a4e5a6faf4ae16381b7d2f6925e5cbbfbf2705f1af97c0993b267acf122584211ad8838c24d71feb0e8ef23d652603b232b1f06de8a9f1fd28f1abf87b521116ee2d2cb506faf5915b56310ae6412cf76d3f38c019bb85cf6d23fd89a945c13930492551b699fd2fa0160ad030cf7139306a6dc73b5ed4bdfe5bf714c1e9a43313fe09005fa4ac3ff4561c4a4155b64348b44bfd35310b3651e2fd3371acb0f34311952fb1d0b50397acc4e71b86e2f0a433c4d2b9b46554cd92dde94bd2d3b5f2af0d6d0e345386dbe0ec9e8925abf9b4c91450aa1ef47811805d08329c22e639873f15ed6df121420eab8a0ded137fee3ef574c5dabc2c793b031da62e44de2f5783a4472b4e0f1ac50fcefb94d8a6680ee0356aa457bf5ce8f8a5f8a300a0a0b88269779d225510ca880ed742e445db0c70efb1ee3159b6d56479ae3501f988b469471f80140000808705750cb0dee7e882d4318800000002540be40001b860b7dfe3a9fd46fbd034687a6c2a3ddfd61896b8e7521402369383d6a52a591a5ba8b96ade2d2e3eb46bb10a8472e7925e0133ddd20c04cd5c187fb5dcbc6b79bfaeda60a2c58dffbd516dcbdfa06f9309122cbef2fc7fd199b87b9df6f939480c"));

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block365430, tdAt365430, block365431, tdAt365431, trieDataAt365431)
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block365432);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.isSuccessful()).isTrue();
        assertThat(receipt.getEnergyUsed()).isEqualTo(21000);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "bd99ffaba6e054b0feffdda93b2364ecfc4914352a73425d2878a3aeb8fba7ed"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "204b0b88ce011b0d3e351d1e1fdd6337338fb47d15401353e926ceb82d87efa3";
        String expectedReceiptsRoot =
                "3c266609eb7f78264301a5aa138697b44d00dcc40bdab92a44d66ddc8f29c093";
        String expectedReceiptsTrie =

        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));
    }

    /** Tests importing block <a href="https://mastery.aion.network/#/block/1016685">1016685</a>. */
    @Test
    public void testImportBlock1016685() {
        // data extracted from the mastery network
        AionBlock block1016683 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d01830f836ba0b8df60468b8c439144c6732a9a92dfb16f231451fea332c1a8685335f9a570b8a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a02193248857170a063530c435b350fb595c1760e4bd10ab1064a534360dc609baa045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bda041494f4e000000000000000000000000000000000000000000000000000000008083e507e1845bf3a213a0b7dc86680a173e3135fb46076c25e3cf3586dcf105a00ea637c49f60c90e5730b90580013086909467f5d5b1ecb12f5d716b60b924a87b5bf60d4f80b727e6f48a7f03cc0e527163e832f8f3ec9111080695ce18143649978dd70fee1a4bcb71ddebbb72652eaf9d01cfe878a834717a2f36fec15623c27379c87104406c4d13091330a83d4d3452cce3684c4a49f2db1c057fb0bc8f62002688b4714ca4999698aa1a08fd987324e358fd976f1c66fe503d4b08cdeb3f55de4c68cf1f559f6bba42cd31f6bf848a6093428280d917a0b010fe03aab12f9e665c305b0bba287c47a5c03938f87e110d06c42da9401280798bd5d527480990c6fd379a3f96d3223c2241ce7a9cd2ebd76c51668b6020255854720b2e38003f16f8dafb2b324e3f86e96bc65c887ea72515920799ba61a846e77cb8c89f0fd4b2ddf163214590a67d73ffba5ca5abcd4dff2a7175ded68ebe4894fab256d63988e1de27250b096354ae3e1ef621bfcd25757d05aa3fbf3ddb0036787be22f269b7b5fbf49b9fd07eb07cc02ce19f816b300c46efd28038a39a60e8da0eab9c93a1fcdc4f2a93608cd3d674936c431c01a1b58f1b3a60c072e3f12350285164a60801d888a10234560f4fb2d5d322c5d339d257962281b9e689ace6662a68a4c7b4b30084e23aed4e96d3fe892d88178af598c0906513b16962f4f4f4912648eb9bb43d646b305be96370bb3f818a91781fb3230852ca695c6e190254fe40e4c030fb0f5c718d8eff44254f5ef65fed61eb8d3fd8e7d52f17aaa4d08552e3b902f6f65bdf1468a0766f596d8ee7db77c8419b6295f33c30d0856e5124776a572bae5abbc1da3ce094a03a92efeabdf7d9cd344112dd7c1fa3970f6b8ef2aec7befbf16184abee63257f523edbd2a8aa677d6080bd5724a0934b6395f374627f44226a23573a3241d321482ad05aff65bb771ba5d424f553dc3c675c93f5c160fdd8d0c1b7597666cb6444e1faa27f478ab3ef36e111b2c7b2e8e37a35ef664513c2546807a2a6bb7760d0b01377fe73088476436e9333aa41b7356b6cd531b3bab0ecdae90890940197a705c1c574a377a998e26f7e38703e3223e829a0b827cbe5a309b83e4c8d9ddda2cf2802372526795e2497fd2155844ebc664fbe45e636bbd27179f6a018da4936375201928f75535846ce75cb849171a7252ee64e7687be7ffcd2b0c79b58593967b29b83f19a6387c575701646b642e3e29ef0be1c63a4734238d5143ab762f58e2197b504a7cb0e5fb19fc9695f87c7c09cfb95b3cda0f956acd1a0d1769fe3f110325cd91ab0af793d6a527b7f76da19e263b2f395bd6d0fdb20dc10cbc46844c2c9e9d3958604bfb1995de8740e8bfbbcf1999ccf46c42e170f0c9ab1ead1be47bb71b0e21d3ca0b70eb9a0437b741a590c1188690c0374b7a51ae9962178e0dfdfd36d96763ac245be2f7c4de574643e0255519aa68732ed8b0ef28c6df374105182f68916f67c99b1fa69fe7be248a9c9fdd028b213ee4fe7b528af5e73c076308c7f3020bbca3abb12048a600f2c5c27139399921177dcd9aea59233b3cbf50cb525f9305eb5e7dac96138dc72ebe77a2e6b1a6ba23003a1f43f3dd576236ba339aa636c25736ffe43edc62191e113ac7ade6694e6907b8b58f93c09d31df12f84b4f1181820942fcf2c139489a1e87ca853814aa3d015addd7242d0819292ef8e5206fd79e84f4f40729111d5a58eb04e5b690cf72e39b32993b6d7e2ef5027f515f3673ba044304087b57e1670b80234b470b6c533d802e1f51f6f82d12ab4bb970a552645242a2695b417b415c78220e1c0a6942cfeb1512119b7ae4de8490c71718221a5810b573b35eaa62f2803ce07a42bd865c6099761e70c193bc45e836f76cbc28138f793199274432ba61ab22b9f0b567044c38a7e9792e472d423d35215c65911b3b77bf72e498dc61a6641022b9c1fac124bd3ea6a6af7431c7a948c99fd6ba6e2f2b46e90a96cb0870f414a251c45a12cc35fdf367193ec0"));
        BigInteger tdAt1016683 = BigInteger.valueOf(61_824_745);

        AionBlock block1016684 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d01830f836ca047cf2933214befb49fa1832bb05d78f61054d40dd0e485145b4b71ba3966f54ea0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0aabd4efb7590cdcb5f267ee4bd61604b217e4bea7d089680a5d8be01d399efb5a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bda041494f4e000000000000000000000000000000000000000000000000000000008083e4cea0845bf3a21ca01a10b2400b1de0ab77d53ba3dd25ce323880ba35a00ab85af5803b9493cd8a34b90580007de19157ce0ffabe7e7b5dc4d6ac2d2c2da7f1a3f603990dfb07c50d2b7d13ad60f2fa0f4806746ebc0d4704949eab678a7a8e6d8b9056371a01103a54de39014c119321dcb2063f49e52b73a6ccbee889ec5bd5baa5d30328715d8a28c401bca0fb4235e92748d4fb44e4c7170760990121f97181aebefd09d935896889fee5684fa31dc36b2fe7d701e3a7c5a84b1886988e06695eafaf0a5464aa93f807a644b079e46d27a1ca9cd6eb5adc1eb80174f46e100087efb3ebc327d6879039e8b464bf833619be60ce11d6cc0ffaeb8628ed0a46ef3a5e0ab5d33f0c30d9ce1ac180cdf4276e4c78753e2b1c55967c625f1fff66d514d739507e06da26a27ce82af7c2027fac8d083177de16720c269afd7c1c9ebf88e3e21e7eb475a10f941df4a183e9ebb54e2924de438d4f1af5e5f0b0e60d90449e75b48f2bb761a3121b886215628a3012ba61180e9f92bec268011dd0432d5671ea8feaf74e6cd76c02a6b23cb7fbb14db05f3f287c1ee91b8af805324e0d041a31eff311d964c98e7a239bfb89f21d22fe7b873c0f41c340e679429a2de2c31135b6f3a283d48d945ee7481d66c339f9b1f5768a179da9ff47a22a8ed1786c56081bce91e4553cfc2e7161725e96ee9447a8f5eb84e73669bfae726bb5d03495ef51cb2ae599f9ab63b786da2d930b1510b6286d7261c455eb31de77aafbf9ece4622fc5ae20cfb4206869df69bb0ad7baf61c16727f42060859825a8b6b5c183c261c70424a8777f908bd3275411c592b65e8b6d125bf4b6a25658109b5a57cbab2e7121e22439e24a86865fd3f6133688ac1773ac0a9f9ce4f387fbecc50c55a9a7ae8b7974ecec9e78c18b6bcb8690a05e4f6faf41319b1e43d3ceab36e11d81232a1325d3a3083054e47971da689116d71e6274dec88127b6ce4115d678ac2ecd5917cc7af1bf969456d82c89238a9474d9fc7c75bd91c0e252b26566a05bf262bd420b6044200d6c525caccd4c83688b1109745c16f07ebe97c9f381ff7aa48e9aeab657ae3768b0fa773319a9c08b99fbb0172a873ce2c6260b9439940b4aed88e17250d7bad496780bf4550a89902ed2b32a180d7613e7b1577fee15c019f71b5a2c4a2c419304937a91cfb2618b30cf86df502d8d46b40e7ff1cfebd911e2420ab0cbd640ab865c7058b196f0c2639e138782a6a6f2e0b10a781e0a9be012c4e5ee30906d64cb1ed6a4603a2fe9f27462d3fac0d029bc945aeccbfdb3a987d052e8b8fbdfad103bd0d36138aa4e0f95d18effec22a497e5270bd870002300910083329b093c9d6dcf384c9096bdabed7155611ad7b780a76e98ab63b08e83cb6ef13ebd7c17e95ee05e1131103f2016a90ae55c27aff6406692a3855592afef7026c0a94a184a86cee263523ea0b568980a6c2f34beb820a0598ea62e54477ff5358d180c2a720ffdbda70af921d25c772813c2bfe8b757b934b8f19ee2edc54e8f838c50f9cab5139e45491535d182411b8fdc2c750d02e765013e381ec47f29a725dc98c252aa34e44dbd1b4776a1e4d97d9e7e7866f2feae3cd8b35c2f9f11b84c4b7098f7889fa80f3d8144fe17da08384464fa52db3a3b919dd1fbc875275ca80016b9eb0239f15c528cdf9ef3fe34c4e05ff084968dbc9ebbd3659c8ee356789411b3a97d7233140fe163cd09738ba1534318173dff61a2f9b85812b018b172b97ad00ac8df07189dbc4ffbcd40f336a4614c2a4df80f3d291da0d207c00138d034942d6ab25111e9178aa8747bf63e9e5767290930141ca7940ab758d14c816c60a9d93be3954b826aee651aad2bee158a5bb3992e28194fb652a747659bf634f5f41fd31fd3cb6b914e58bc9753538207e083b7c8e3ec4bc5a460ff27b1b236a82504fc9df48b2565f3f5bdddf4a5494b3acf85b27c15da2ca7671a33b413ab0e897a3703b54ceff8f13423dabebb6644b431babdc58dd1b0862669abfa4e087c0"));
        BigInteger tdAt1016684 = BigInteger.valueOf(61_824_806);

        byte[] trieDataAt1016684 = Hex.decode(hexEncodedStateData("masteryStateAt1016684.txt"));

        // block to import
        AionBlock block1016685 =
                new AionBlock(
                        Hex.decode(
                                ""));

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block1016683,
                                tdAt1016683,
                                block1016684,
                                tdAt1016684,
                                trieDataAt1016684)
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block1016685);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.getError()).isEqualTo("REVERT");
        assertThat(receipt.getEnergyUsed()).isEqualTo(801005);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "9a47de6b5ff2e471127adf85757cea88cb422ecc3448cc3f343ab42a07bdccbb"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "dc4ca88698b4cd2b903300c07dea6eda97dadb9c72f006aab5b263d3626206c7";
        String expectedReceiptsRoot =
                "fd6bb9b802cc594a3790702ef4e1dfb54dfc0fb4a25bc851a956091001c9876c";
        String expectedReceiptsTrie =
                "F90125A09A47DE6B5FF2E471127ADF85757CEA88CB422ECC3448CC3F343AB42A07BDCCBBB9010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C0";
        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));
    }

    private static final String userDir = System.getProperty("user.dir");
    private static final String moduleDir = "modAionImpl";
    private static final String testResourceDir = "test_resources";

    public static final File TEST_RESOURCE_DIR =
            userDir.contains(moduleDir)
                    ? new File(userDir, testResourceDir)
                    : new File(userDir, moduleDir + File.separator + testResourceDir);

    /** Extracts raw trie data from a test resource file. */
    public static String hexEncodedStateData(String rawDataFile) {
        File file = new File(TEST_RESOURCE_DIR, rawDataFile);

        BufferedReader reader = null;

        try {
            reader = new BufferedReader(new FileReader(file));
            String text;

            while ((text = reader.readLine()) != null) {
                return text;
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return "";
    }
}
