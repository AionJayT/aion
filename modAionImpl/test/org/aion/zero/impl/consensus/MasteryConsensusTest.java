package org.aion.zero.impl.consensus;

import static com.google.common.truth.Truth.assertThat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import org.aion.log.AionLoggerFactory;
import org.aion.mcf.core.ImportResult;
import org.aion.types.Address;
import org.aion.util.conversions.Hex;
import org.aion.vm.VirtualMachineProvider;
import org.aion.zero.impl.StandaloneBlockchain;
import org.aion.zero.impl.StandaloneBlockchain.Builder;
import org.aion.zero.impl.types.AionBlock;
import org.aion.zero.impl.types.AionBlockSummary;
import org.aion.zero.types.AionTxReceipt;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * Unit tests using interesting data from the <b>mastery</b> network.
 *
 * @author Alexandra Roatis
 */
public class MasteryConsensusTest {
    @BeforeClass
    public static void setup() {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("DB", "ERROR");

        AionLoggerFactory.init(cfg);

        VirtualMachineProvider.initializeAllVirtualMachines();
    }

    @AfterClass
    public static void tearDownAvm() {
        VirtualMachineProvider.shutdownAllVirtualMachines();
    }

    /** Tests importing block <a href="https://mastery.aion.network/#/block/250718">250718</a>. */
    @Test
    public void testImportBlock250718() {
        // data extracted from the mastery network
        AionBlock block250716 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d018303d35ca05f390334f14d39fba904a6b9ae142ecaffedc1e0ff2e5c2b9d5058c71a80bcc2a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0ead0800286cb585dacc0dc399109a155e333ff1cbdaaa32327e726cb6b3a70f3a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0ba041494f4e000000000000000000000000000000000000000000000000000000008083e4d4f0845b7c8ba2a067f2089589637a28fbdf599a8dd159c083e82cc32fd945065770c0564d37dbd3b90580000c9fea2f4037a1ded6673a5513fe5985bf7bd93b9f0b74aa0b73e964c3bcd8a63a8e9d93245646bf638b4c00731c1912bb37c3bca1072e064983d1a56ef6af01c2201b7d00db24c3edd5fe22272da3be8f24bf83a4f2fd008591617f6c6f4f3208d10f2ee89096393fada749f60116007267baba7beb11ea2796864cf9e77199b969d0221471fca1e59b926bfa613bc915798319def9eaa9f835bc6bee6fa9d7cfb06f265667bb53a15652869e7a54064ca95523e842322d16b529e5856e56e6f535a7af1e1e5fb2887ac3a2c676f4332298f2a70b32c21e27e1c324bdcf1a85f6ed36700e3736be3a2ba7d7fd973e43c83807399f8a87e8597ef0ba470276e8cb589ef53538c50b5275ec20fda1fd7fe8a74cb88ea419ab55b0b30f171ff7c98d71887a222998f331796a9b4ca58d2b7d767a20fd3fb5c25314807aae8c2d9d65b5fe4342b7b7433340df8f77f026b4eb368a06b35ff3a13e9f2747ffb21b04684f7540f2d0f7e01eaa10901a8c65373205e729443e2e7f4bce069620f1739d6b5823b969cc42baba9cbb0e1b394e3a9abceaadd1de2ec5953f33e564d61d7c08231d3929febab9cbf0b99c5ab06a7375a8b50ffeeaf1071ffda805c9705bff635009ccb0f4df7dcb2077afff19f16b2623167aceb1df8727f7ca836f531092dc1ba1170ef314d8b409a6b84a242427e5ea77284ca6fd29e752e8abec2f564f12667203680c2bc6fc997da3edb71115157c5ec5e7e62bebe5269f498a99d6be91c9fa5d183afca221e7444a4cd3341f62daa9a53c6dd4fdb800e854a1e20f73e7a3fb6c8c36624cb70752bae52d7c93556f10527b06a70142dde07475fd9ee46b9b6a4db5b8d5171cf0aa0ad531e3e861e6429e831de5197e25facdfa3e22b66d5064756afb82a4853e766dfcba9d2ff7f114288d1ab06b5917276b2d1e2fb0baec66dacb93ed184d3cc132f09d6889c0291b4742c3e30f26b9c9c139e209001ecde8e2da6fb27081189cebb7eb2b4a93a8fe7f3e0d4589b07a151e3e1acfe1514a8e16ff9892c36ece930f8bec49c205dadd752d435772cbcd58fc6410f792703060ca4bd6cc9902fc47fe4c1f2f641f4649f05ef9d50788525653a1e96cbd9f44110472eca0a36eb5334f73232666928158828e29b3ca45808b91af0c1e47fa94e91191daea283352b295c2a436614a0cc463a1bb59f95d428ec9b25cf785e771d9345a8ca3afe47c03e7f3938407a698a2456098fc434d1e9f536ec73cec697472054f1ee662a0f4c2666fdb82ca8b43baa877fe4919793f300a0ff7086832522577bd152a440318ef436dec6edad939b847bde708bef7716f675eb6d5a2aa87d4b429ef170c0a4c9a346e62383fe8381f3292d2a5a37a4df5bddc22aa9a727b634126286d09408c8e42562ced99bd227720f991d04dbc7bbb3842ef63f305acda56a2e0ea251a53836f58f8f7626a63d2f1646b560a78abfeebbd6c8c01a421f6b572c05fe8cdfd47b88bbca08d71fefeee5d3f5b668ba16b30dcbfbc507e0b72fa800f4efabd593913095fa3ed963e007993595ad6a37d4d775ed3b51913190843f5a7b977273e87f93f85d3feaa5d1a5ebff24803f7d464b464cda36955fe0823eb29dc35de5973f3af294bc57821287a85fbefc83ccd4e290dc8d8e6a8494e04cafd17f47994cb3ca4e867687f235a8905caaf859d38139dd733473f31e636455eac23a26de87c0a75bfd901b931e278c25dd0ea28b22fd1112dbcb81aeeb19fad16240fb7cef2642d93e40228e179a511bc225cf3709e047be73862bb2feaf4288423ebc264ac8598fcdb1db8048e389b92c9a131ff88d71f32371b35b43fe1d32eb612da7d6816598c5f348ca528a64962018429b27deec81c53d0f40b14871cd7f3593bb1a685a048e7213ca1311b3c5a5751e4ff7d7fb8481b73d2e60d78f96370028237eb72e22896209a231f276226aaea03c6b39e76ccffc0"));
        BigInteger tdAt250716 = BigInteger.valueOf(4_114_127);

        AionBlock block250717 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d018303d35da0fb75d364db63c1d05cf4ab6e7569aa754c84635c4247f9691d1ebc4031f6b2f2a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0aa7ed7f11d46e4aa493c6a00659e873542fce66f740068d73dc12982e219c92ca045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0ba041494f4e000000000000000000000000000000000000000000000000000000008083e50e25845b7c8bada0a6eabd5bccf63ac51a5e68cc276ee51efc57222680cbdc8ea18f025bf3314512b905800015d2c77440563a60e4dc52f04f5a204a07bbac88b207bd47268b45e9a9ef3f7a2237433478f9bb5fafd9c707b98e9b6615251a5c71257f91c64dea0cd385b6ac8710b10a5be132fd97605a6a22c1a28ff322658a0cbbd5067c80d74f24919f9babd057f097752216130ba9463213210da64d7aec7ff1a03d54b8725337082532e3aab8131744e9b9a30bc4118550322cfa6f21d9e73aae198735202209d7938fdea5fea9594a23d6ec163199da57bb00c447bd5477f300fc44e639e536d7fa645442951d2906bcff72b1d3b23ae9af9b07475525bb18e288b956851abd7bf1fbfd30f1fce0ee567477f633f8c2a4b601e52137d2915f6510caafc61047cef5c9daba9ed971a72d0674b6191eb15e8279cc51175f3890447900193652dd08a1e21923e521171d143014f9279b932a3bc169778429b9e51199e49c259be1483319e35b57a5bea8ae77103e01f1e8170aea3f779c7a64b7d6c9216c2409b6f09601e807a0c1a11793e13c1b534229945c89abdf35f7062f55b20eecbd39c9bd3f023662a9d0c42a6dc733439d08d99e97949db4863f27380910ad515e4aa7c52c851715dc947f43c76455fad7ef4b62669b61777ecea5a57a0d11fab681e29f0f3c5b6f29f60dfb2e4ef5937ca0ef298596b80e6556471a75d02a5a2f554ab5619f194dda19b8a6ea773b7b1bb897a42836616aab65eb2eb7ddd14047e5c84b659fc966ba4e5f5effcea71773c1ffaa3a0c82b9b7a1182a26a520e6289be3b284c7d1e6b3c6d117ec1d831cc25c9d976b1c59db86aa5ac6ab30ac7fc4100747ea6b96c49db134253746ea505ee51afca8bc3a170572c540764b727073fa6acf07c7aa7c10a4bb11b30e9e9349fe08af6bb8b62f4c052acc91aa9e4672365d48da5677da1912fda7fbd54a206f7cd8bec9e43cfb2026f307898bea7f33be9f9b34fb56d3576715f53a28bb28ab1963b3f5150cdd3ee28b601ac7b15ac153b2d8f800f528a717a34ced25e926252812f9057c5053b3029d11096531c4759a36b63ad520f357be930c63e471c9aa3babdd687e589512e7434d5cd032fe4f9dd4717b8a75526687755d8747827afeea5e014a988b76e777a89b3f109a9a41dfa631373d170a2c13fac211a98c40ee593413a066562c4e221af8a594325467c3818a07c7ade47d11c75cbec18e87d4bfca8a3ea4b161ea43f06dfd51131ddda4baa4f76be8dfda917956b38b9dedbbcb7fda1002c67a31fa78243829b0ae2f973ea461f621c4a14d2c34ac178981a68c89ddabe27f6ec798fdda13827fdefa0943558b632d26ce7928601b5aee7c1ac47ac7f3492e2cfda7d5711b1051f9fd3d36317123f676eb82a660d3056ae8a7352914a02d71178450d65c89bb89a236c1b21005a35970c39388da1af81375e57c02841235a7e21608e2a4942f129c7d34c82b680a3625ec968eebf7c7c50f26aaf2d5e63838ad74de333a34d04d3ea3de3be413012e38d4b056e8a6a62dac14a7276b4aa14d4be51f5c260746972a44ab0efe77a82f416ee62a27e8573d227d0b1cf439477be78bb3d0e74752870a19a5e1f9b31a8d471e15449a6929d2e4d96f6b7205cc8e67d6bc7597d0107b294599dc03a6fb3bc411f53150be68612ff2d92a3e34beab259aa6f8b517a77d976651f7486ee47ae85418ea721d05ccf363b797c47836a3d3363affef3cf0da2c4a331aa1e961b6ef972d8015ffaa76e9384bff24d301d02d23dfb5170ae569fd5d3e5765d89b0197fd9ee523cd3d13795abc74748c2a3406edc1eea68ec362bd6f13392be48a0a5b3769c60c292c0e6e94e7f2bf762c8f1f5fa2f72c648b0463104d3e4d1d349f84b65b7706270237681f327a7f97ac35f702ce423a1f7075a977bff207f1dfb22044ee7b25e5714b5b63cd086b08c339bc2302ad444e4790dfba60734a1daf31d378552ea215e5851d5e67b99ff471ac9570e430e877b42c3aef0d7d0391c0"));
        BigInteger tdAt250717 = BigInteger.valueOf(4_114_145);

        byte[] trieDataAt250717 = Hex.decode(hexEncodedStateData("masteryStateAt250717.txt"));

        // block to import
        AionBlock block250718 =
                new AionBlock(
                        Hex.decode(
                                "f90857f9078f018303d35ea0491d1f9c3efa6410faa9b259579b40853c9ef77de5acbad0073608ba09b5b2b0a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a037d47d9fa827ef34c2dd844e2cd72a2fe4a06d23bbdb2d97226cb4fb7c8432dba0932a9ff2b9c4d2279c12534a0169ed4c992fc5e6e87d6236cf92148bb790c115a0224e0b2f1c4e49fb7c57c8d34dbbb395ea350c1c03e8c1e1dc518cabfe26366bba041494f4e0000000000000000000000000000000000000000000000000000000082ad1083e4d4e2845b7c8bb5a010e644780ded32431f4c8711558e0ce846c47bbebaf6100b2261a4684bdca726b90580001a3eb752b130f7a1e2ef1ea3d1fb1885f0fad96fa81f9b32bf4b13da9ef812c724dc6bb9f6a37f2794888e0cf6cb118bf7d1255fea0237360df13ef41f52a59fc21c67225e071584ad6de2282477479376e8fde27528040164fae1fdaac343b2a918292b666a140a84a7b97d5b22b79ab7eae9adc970a7be336982abbb7c2591befe06116ebb7f2beb0fa63668794a19f71570d813f5b77ecb15a0e59b1d63940062dd19b169f6c62ebecb63fc62ec06822e785248feda6510bc6ed9b6f9370b579c392124252c64aa9b127dea2ef1824968d2dc79e9376db4cb0e202d388f70880173e0a6b1392393d502fa3330af6a97206decb47274334a3f04c456c2597d029761ce3e34fb1f7b074ad1b3723f5d65d73ea0578338f5ae6d5bbae140c00907aa1dd1b9fe717e583bfa884c8e9d27faf2fc23a82cb687ac7029f2c5ad2c0b14bd2924633a97b083260009c2d0f8beefe58a285ffb2798017ce0b03e63eb018b76a3292cb09fb34ee82ede9779667e48c5badc085853d70a6097afc565cfc794802b316b1af33b71aeff232f758a7ff338f42499fd35d57ecdc56a9a496ac2aa270912b30543c15ad223a92e699a69a8a33cc0fbbd3c04312ddcf2da45b0f811af2b1bd541d67c7433b752b9301c5a0ae294271ad6d3734fc712fb5e551ae6ffbce028bde277ed972b23ad591f502b9fb1aab58de861efff37dd7796e2e57fab9b3fdb37e2d6e7fc798281f1866a01e9fa2ab0d397713adbac98d5ced80eec21a47dfce64abce6831de88f92e2f0055e220fe10f862362bbdb8108f6d2ee1a65b9005f79b00a74be3efae2cc40e6d7a3782c9ab604e9c6726f1f518e6e16d2a85ae30fedaf2b02993fe80428a2062e5d080c39aa53a2257dbfebe13d09e3bdc503ce9261fd3ceb150d3d9e5b077d9cbed4b0063d403fbd63ea5a77babd38167a1d71580be7682ace2100e2ad642cbe5fb92aa45913abc3101609f779cd1902103ac7650a8032f63ae34b7707f6f03b8135f760d01524f2fddc93ee2cb4b9ad77d312e570877f87fce6c4024205854784831f2ab54a5f6971ffdd77b92069fb8e1b29056a5502b63d9600d71c890f290ec5befe28120a0e54c0b6c39639bd2b57da2f387fd0c76dad6efb27b516b8de081c687c7737515150dd2185cb95916e973e261a6851892aa3e161df4a902e8e692defd4bcff9b1fcd1be0554c7f6833087349122301ee3fe4e7d7a469eebc03315d056207a150fffa3d855cd34a7c7a0667ecd62206d8f34b51d1f8d0fc9ef953428bdc0657a653f6125a2e015984646922ccbc31a94d0fdab59518f47bb0c8414364972cc4a958e9a810036536b1b723f9f8d0fccbbd053aa4196933595399be5a4038b6eb8385ef15ad14f939440f6be2c663baf3aafc934ade92794d5cb4794ad50e289e23dc7b83953c52c14b2cb6081c36549fe2596f1b61dfed42b3fbde725b5743ddde10573aa1f038189403cb8d19d985a4427b71e32815fb2fed534ed92b5de9049eaba8ddf96e77a788f146891d8de76d1c24fae0421d97e1e7f931e50d1dc31f2fa3e21f87b35304a1b244214b82c5d285c739e68f2850631683b3b62ed72e9236058f4cdcc9b3166b63df611e290a3e29d7229b9ee7f318eeda757f854a08f789ac5513ae52447723612a41571842cd686f64b7593719281d88f14d93c39609242a661b146fcb67d3b0845151552e0be5ba51a35c5c9a5b4906c22eb254a13e995d9b151bb564dd92a42b5d58c7d919487b8dfda33c532458f194c74319653ac3e1abc461106645a81106bf22686e51e2d9b397bfef3d953dad0039062a4e5a950da878d64b625ae32c0e7f79c6ffdf0107dd4fde2bf46ee63e5663138870da60d2f743317ab21d366f4a39223c692399616764e73aa27cd2de7f97df0814cffc041a9e8879036f56e1e23841fe6a797df8552b467d086f98815f2555db61265751f2db1e5af327e2f8c3f8c101a0000000000000000000000000000000000000000000000000000000000000020000a4a6f9dae1a048613dd3cb89685cb3f9cfa410ecf606c7ec7320e721edacd194050828c6b088000573f9295f73ba830186a08800000002540be40001b8608e0d3601d00f6503a32bb6f06cebae21a1aecfae6839c9e4ddc92a6b1e639a241d37cd1cb25bf50ce468b6aabc54282e405ba79449bf04b3ffcc9b70b584287796c1b30baebd63e79837eea201f3017abcaf572ead90933b1ffc73fb35402909"));
        BigInteger expectedTdAt250718 = BigInteger.valueOf(4_114_163);

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block250716, tdAt250716, block250717, tdAt250717, trieDataAt250717)
                        .withDetails(
                                new Address(
                                        "0000000000000000000000000000000000000000000000000000000000000200"),
                                Hex.decode(
                                        "f846a0000000000000000000000000000000000000000000000000000000000000020001a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c080c001"))
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block250718);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.isSuccessful()).isTrue();
        System.out.println(receipt);
        assertThat(receipt.getEnergyUsed()).isEqualTo(44_304);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "b365067f1b0151b0064f5d31caa78c0d8590b11a56f7ece859b5b766e6612c92"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "37d47d9fa827ef34c2dd844e2cd72a2fe4a06d23bbdb2d97226cb4fb7c8432db";
        String expectedReceiptsRoot =
                "224e0b2f1c4e49fb7c57c8d34dbbb395ea350c1c03e8c1e1dc518cabfe26366b";
        String expectedReceiptsTrie =

        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));

        // checking repository state and total difficulty
        assertThat(blockchain.getRepository().getRoot()).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockchain.getTotalDifficulty()).isEqualTo(expectedTdAt250718);
    }

    /**
     * Block <a href="https://mastery.aion.network/#/block/255652">255652</a> contains the first
     * bridge contract transaction on mastery:
     */
    @Test
    public void testImportBlock255652() {
        // data extracted from the mastery network
        AionBlock block255650 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d018303e6a2a079091b407ce38a1efc9e047c0e2cf4ab907965eb9a24060afff223d9479c3290a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a03961230ff5f8381b13060da87081db859b9eba1c758331403c8bab7ca3a767c1a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0ba041494f4e000000000000000000000000000000000000000000000000000000008083e4bdd1845b7d6a63a0c1c2b719718c49ce0637d4a3ae95c7d39d9b09774a0a1abe777cc0783b828bceb9058000039cbe2060a8132fb30329dd3e6432931a2c0fd474178725071ac948bffeb2f02a180660e884162b6b69c106ac315f688a9ebf38e02b151600952bfb19affd17060cb50e94d7cf75917e15766c0cb2013516e1997065110c65972bd95825f6e15ad71e5139402075d1cf2490bc1b1c44dccb3595479d22829335d702549a89c132a68b1930b6fe6a285cd5b3480825e90f721ae6bea5fb0c011c392f40870c9cf1b32080230849c532e4985f9cd38306730e1b5125fb5c5ba1d7356c5d7384463b22223cfe09656d576617fb7babaefe199ebcf768fc32bc3b75852635e92ebc7444b0e355e62b8b1a3fde540f85204cd03290c0e54449556667f5dd7bfd6301635b089733e7f2085e77fa483638effec7224eea9dea5b65a7ed97e2d1495c4541cd67b75c328c7157ed0bfc014982636efaaf0e25ad7c5b2a0516b58cae4d5f066ec19bcb9b78909f7914925ff11ad9a0f3d6c69b35d7382e4bdd75b7d1a301d0402b94c7140eed629c06934615876750913a842120a760baa91372a74e209d53caeafcc037fb183c57fb03c9574d3cac4d5d3d89372e61c15f22992a2bef6e53138851428e37159bfd1ce42ec416056f34a178fffc6c06d03cc0eef495396eb675113ee09428440fc9391b27358dd6eb1b764b9bee61bb891dc6e159dc5fa7fb39d554527b31a7cfcdf63f39cb63d7be1ae3568e6e3e6dc25d3d8df890ee08f43f1167894edb7198fe32ce3d3928067e6a91f0b3bc3efa29921d9e8f8a68d374ae1d14131dff233b35f463f6b0002221bca277b7ebdf906fb24d0b6c656650c3441357ce933bd5a9969c241b77349f412d5ab6654c5ba2343051b63af9dd4c0a43d5fcdef6920938be2324e470dd560a3048d09142e5957c816bec8427dbefee873379857a95a66b2e83748b378ac632e6fc0cbc23c034f0e9528550eb49562720901a184c7077031af081d6af16f4e822fe3123e698d5ac6553ceb4a5e0005a153514b389f2f99d0e539bbdac2fc85fc76da7f900e5665790791705b9e7ea28be95e8721d23ec3c80310bc0a07a2931acd04d65f254bc2b24694a1d24340c8c491776f66f772236e24e115b7896b43fa9f137f4440f00acbc4c993495529d10b8073311993b14d44d9b92c827afa319be88deffe9ca0c34b46d4f82f5b8bb3cc62408427b98826545f76166e45c0ab19f48396332b89f8020436482619c372db4f92dcb2003f2b3fe888fba4e5100a4e3d5edb77137e35afa2c2dfa853b5807ed61c7f5147a69d65ab49d2974b960a7c32f5a50dea1527ea0142eb8c90cf90686a89f868765775e27b23746c2bdaf3945559e5b90a486fdf3f4315a2cd71bb45bb86d3c4c27053b9ebb90c7cbaa2c368f408c93298f8da7c7bc7bf80e84670bc63122d8d5576e19f5562f4b8b1386aed5e205a6b88e8fa78d133fe06a097b82a115c3e52894c90114fc3bec5082c08073aafe1fe292026832895c9b45c0025dfde549c26e9df729960d2bba312ee32a686ae87f12f979044f747d28e6aaa239a91793021b3df5759c0b0fc151efd0e34525e81cf439db4bd27f73ec3eb414f23604a566f4647c6f6567939e2e12a68c7afa3fb7e88202edfbf13f926e8f27bc5c1fd248c1175311a3e3a6ea34b58204ddd3efe41133be5b251f7521fb258f3ba3f10e42e6f787a2924ba1fccf13b8d9e893e701a23c325e0f1aeb836da9fe11755ed31bdba65629875e972d5014049f031c63234a0d4dd95a4357a7e07906ed819e352714eca474c3d2537f6013e4277c89aaf023fe6d7488f90a410ec226c8a9d32f91fc1be9d9186563622f317a3f195e29157c1ebad5fb14ed6aa7b2cdcd872d4d7eba88125f3253842acc18ad7723595909d83b35cfee78ddb747d4cd2c2236686e5dd7424c487e5d55dc4699f6be4d3c7cd9cd4bc740ba2651804e2243479f1c2e7eb8acff5a9bfb04c727013c5ec7d85c970650be0cd91978eafec0"));
        BigInteger tdAt255650 = BigInteger.valueOf(4199115);

        AionBlock block255651 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d018303e6a3a0c68dba85e8edf42cc3cfc265a165ce589f84a59a5ab7adf4a7737c85d634e050a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a06bb3257ac1ecf01f6c70495851f4833eacb847659df8e2186d5d2331cc8d9622a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0ba041494f4e000000000000000000000000000000000000000000000000000000008083e4f700845b7d6a6da0d3348ebe66e1c2a3d5977daea6e638a8d5854f915a82136d910146b12bc237bcb90580000fe1148c4a970d2f3e8f3f879ebb60ad4253f6c2e431e361126344000e34b62a3947f693e565d90c302703010d94b8792b4ce87a17862d55e9c198c44b5ca91ca533081b96e4aad0d82d5b0b3994abbf7be7d21dfc3c4e0ec752acb191f171cdd1711665a1df7898c0622891220f7483632cb53725bda406105eb78dee11a42e9e8a8a15f8e7aa4a0570ac27e3b51fb40bf65606399033769a33d35f0217597230f7441693ee0358908c6b2cf5dd740087746d2abb72f3bad2d27f6ed3323118c872263e51104a7aa76642f79ebae3496f6e4dd97c89cb3071a3511d50a4e83d927ae72d94a93fa033ca983b85233042713a27f1743f4994c56cb15c77d6d75a3fdbbcfb2fe7a50fdaa33c2444931cd5a51430f333043c93cdedee209e516f3ac4b2b535313b3acf81933bb72e2d9e40fe0d34227090e6505897fdf08b1d33e755be3a5470b8ab00fb3015854e3118ee977e94266f690261a69a8751f155c20073960a18573fddf2cdce0e7c103a5d5dc8d9796ef90e6f8cc7666c7362fb46a81cba1d1e45357eb1e77cdc25ae7610d1795483f0b25d440ed2682178b16eb19d66345621f249c8d886a77b5434f98292d5a6ed18ac141b0420e908fc02109759d8a00659b30741313e03b7315940955d377e0538f9db46304cbe4dfcde366742783d03053dc8bf64055a1476483c0dd7ae296e2323f87c2ff11b6e8a6b20d64f47efebc6801e4a9083dc49657e66f501dc5a62effe95cc3b832d13e65b1a389790af7b32a23b1c4d7f0325b11973457a9fe3838e076a3492f65eb80798c32e1eba45c9aa761180254232a77af4663ecc0725a3acb026c494dbd878db330c1fe79a08fd34b17edb1097eec6d7b1c17a9012a844539d1e469f9aaf7f9e4d1327b2fc5a5234bb6a558a4e5a061a1abc950277e0421277ad5f90e4027930087b3bacd58a4f1459d69e02054268ea3295153d7a31b141b8ec8348017ba1053bb37500bbefe91ffcf9b1b77ade3d0875a5f2c84dd8fa55b2068f475a2f33d877545bc6414c2d68c64771ac7b0113068890a040c25b26d27d6541c01609a5093f97e725de0da3af5ccbe7cacae2d2b662508e0984866fe7754ec902e56a937256e461293b802d1760f548cc831b339d202a1b25553d252c1416850c32c8f1ae26438d78679435237493cfb61bafbf74d5e424d2334613e5b1da795dec43c037de1c148ecbf870e18ec62720ee28ff6f66509003be795b933e8b2f7cfa561e899ad5b0185be723b67421840efd86c4d89673e8b2438386b32158d273f8c9513e4d653bde073e5d224b045c425f3ccacb020379d975471fc62b805cff3bf5b25c5d5def86fc26f8fb72664f05bf2e571889ecbd374c1b34c8b696e4cc0a7c3e5cd35ae2f68e4357c579247fe4a18c2697edaa60fa72cc2b0893836f70552ed832db560902190043ad69d4780ca9226181c83324b3b9b5898130ded2af5535f9647680fd015ae9725e00becf3f61f30c99720c5c9640955ca835162717bca7362830df40bd1c1feefd7a48769faeb4b40c9346db5c93319975d1934190013d90f9773eb3c88f41f9af26a33a888a7fa6a24cd5472b6c8539be9a56730385b5f8893256b56aa2f536af7ad9b8d4a63ce1ee8008804728640ccaacf38f1553a501574a7b65ccf67286086179820060e5be2f0d09809c372144889dc27853dc2c97656b8ca791663c07a272b547b93859d505b8f49504175f02f6d52491a0658325e7b31a29532106abcc16443f4d892a052d82ef50b27df7a6e0537bef65701ca716ad7e5ca2a21d2fb892122fa1d2a1ebb6b695b1115325e80e6e56933c3a68205d3c1942bac659b1726c9e6a0a9cd55a026179a43aa54313a862c75762c94be85a2114d2fa3db8c4660f5e3d7189caf78f8beed2937f9a9817141a4add17b423af755021223995f2633680e6c8fc184ffc78d5a43345d969205e0fdaa420e9d93fba27adc0"));
        BigInteger tdAt255651 = BigInteger.valueOf(4199133);

        byte[] trieDataAt255651 =
                Hex.decode(
                        "f908b2f897a03561d92626d7acd37bc985c7176fc845ae1d876ad6bcd99756ba6fec30ca3573b874f872a020ababb7fc6699d3178df12ebdd141b095ec0076586b8c4d4fae7f5a563c8263b84ff84d01890180446bd24f656000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f898a0fd402a3f60772cb69eab2b98211715892642226a4f4470b4ca409282feaa6148b875f873a03f34ec94586099470869e74064bcfd4747cbf5864e72a5966f25e4a3d32b1bb8b850f84e808a152d02c7e14af6800000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f845a05386c67c941dbca06b7102bfa15a75ff84416e68319d8fd17c571a7dc71d12ffa3e216a0fc73fb16f40138d1a0e84d81aefeb897da1693fd943e26088ecc1ad6cc770560f8f6a06bb3257ac1ecf01f6c70495851f4833eacb847659df8e2186d5d2331cc8d9622b8d3f8d180a0fd402a3f60772cb69eab2b98211715892642226a4f4470b4ca409282feaa6148a05386c67c941dbca06b7102bfa15a75ff84416e68319d8fd17c571a7dc71d12ff8080808080a0beb637c787490ee23d2946583d43a8cd6c444d05e9f2a3c64ff1e38eca50b40f808080a074dc43c8dd9d4be02ffd8dff0ff7fc240136bc27ada45cf38e37ee069b52b4c3a0fac91580acb88359fbf41ccedad5addf8d5aaad9327f15da87b1e7ff60e4f31c80a08044eb2b9ffb917591b14cfc09f5d41ae6d9abdbfdf3a369a6c6480d5524d0a680f897a022bbf941b5b0ac42f58c8e5f44fec0d59663114448655e4b0ad45af8b713b44ab874f872a0200a76619d1898d7265ded662bdf5b10c9df8d2ab8b73d18872929b781fbecd7b84ff84d8089740186c333383422c9a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f896a0fc73fb16f40138d1a0e84d81aefeb897da1693fd943e26088ecc1ad6cc770560b873f8718080a02ca1e2c8c83220e39798af4cb90818a5b5707d62bd29e241aad486a1d282fb7c8080a08241e5823bfeb4a2cea2723f61af7d791b3196d49cbdc4b560012d4597ebacc6a08f14e141468950801dd25cdef983a4cce8f5578fc897ef6816e881446c59147680808080808080808080f88da02ca1e2c8c83220e39798af4cb90818a5b5707d62bd29e241aad486a1d282fb7cb86af8689f3c9c384cf112b1e912494855d1116041a2bff4882321627af7d872dc77463cb846f8448080a04a435027d518cfc80088380b12468c5a53fbe0d669c5a471008558df81f1763ca00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f88ea01718b04fa8c28bd5159e183827b0ee227590fb3d28383bf0d4a167d5594416aab86bf869a0205ff8943e102428313e141d414bda168a65c16f3a7b75e9cf5ccd5702cf7a66b846f8448080a005fd02342b56544ead95ab1e477b0baaa70f75b109b23098a84b67bf52c25deba00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f896a08f14e141468950801dd25cdef983a4cce8f5578fc897ef6816e881446c591476b873f8719f361fcb81bb95f43debaae8999fd36f79786d6a7b9e6aa51297de65096571d7b84ff84d8089276fe409db2f37f37ba045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f89aa08440ae2e1c5820a19962771a4a265e29a08ae8433f213d836f109057b6722d1ab877f875a020955bfb84f3efa2043bed4bfa90ff3cd072b419b3f601c8dc930f6029e9c171b852f850048c010391b8b9a85d52a4cc6000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f897a08241e5823bfeb4a2cea2723f61af7d791b3196d49cbdc4b560012d4597ebacc6b874f8729f3f2af53c805b6b31dbb9ad5a5cb4a3f89961fffc76ae93e3575d2688260d71b850f84e808a3befd747b9966a597102a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f876a0fac91580acb88359fbf41ccedad5addf8d5aaad9327f15da87b1e7ff60e4f31cb853f85180a03561d92626d7acd37bc985c7176fc845ae1d876ad6bcd99756ba6fec30ca35738080808080808080808080a08440ae2e1c5820a19962771a4a265e29a08ae8433f213d836f109057b6722d1a808080f897a08044eb2b9ffb917591b14cfc09f5d41ae6d9abdbfdf3a369a6c6480d5524d0a6b874f872a03baa19fd2249424c6876a14b4e1313aaaec2776dfa5b51c7169658ab3c03b8edb84ff84d0e8901e9fd58efa8625000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f898a074dc43c8dd9d4be02ffd8dff0ff7fc240136bc27ada45cf38e37ee069b52b4c3b875f873a03159efc25eac3a247b2e85333234f1a984e5a026618911c65ffb1debe7d6c099b850f84e028a152cf4e4d8a795e2a000a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a00e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8f876a0beb637c787490ee23d2946583d43a8cd6c444d05e9f2a3c64ff1e38eca50b40fb853f851a01718b04fa8c28bd5159e183827b0ee227590fb3d28383bf0d4a167d5594416aa8080808080808080808080808080a022bbf941b5b0ac42f58c8e5f44fec0d59663114448655e4b0ad45af8b713b44a80");

        // block to import
        AionBlock block255652 =
                new AionBlock(
                        Hex.decode(
                                "f90836f9078f018303e6a4a0d09c3970f17ba0e2b0ce87504ab63b32e49ebd6b1dbc426ca3f02d2a131675dba0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0fa81460e89314a8c61376a97d8600dcab3ab257c2979bd00bf72acbef65f5111a04467e38380e1b477ae071597c371449ae14b63cac7deb37b4d6799e3bd23418ca0dc9c736f63cfc0deb0ee64c760ec8c88db5392dce951b0328b374fbcd5d91fbfba041494f4e0000000000000000000000000000000000000000000000000000000082a51083e4bdc3845b7d6a7fa0d8eb38888fb26fca1221fae985bf417f79e60646664de9e61db03d74dfe0cd43b9058000358d400b257d343e760b641c32ff1b5ad3a1ff277c02bcfde7ddf233055864a0099c3b906c8a378d7833d0026dd1755ae4b5a2610d9a639d2354d90c25ddb4e994063c005996b60803b6face61278f748b786c55e318140669002bdb29e76a6ae24062ab41ee57d8001c68bd37316617c1f584cb683e7b979c60eb191e0d5c163fb15a13efdff746a944a634a6253c94bf3d62777a78230cb6341381ad6c99be7facc55648b8934c7796699d5eddec0265d4c0b098339f651b0a140d41424ad1eab7dfed2d24012930a062e4e734945d2a2fdf8d57a5f3d97ba8b606040f8acc88dab9a4ee49217b3f03649350aae803d41cc6ce80d4faf00a3c2f3a3e8f455f110688c0f6a516109ccdca75a7e8dbe3a8ac39ca4f4d6bbb2abb7f26a775555745ac9a2060af4708821cf6c8b85b8072b7f4a21f693dcf8525d30d2891a25464fa4781f6e0211c38902c43e6298405f7ad6759f35343dd63dd0684515e6d470045f034ccc13c6ac9805b182fbf125964307b5540a204b0badd84c68ffe774a9d21758eb813e30b9360873503071593cc03e3206adae305315e49706abb8679c6d368a2228fbfd6b735374a4678497ac54678506e2f66e8113344b4b5e58a899c611740d6e20db1c41a12eb7e981b45825509138e2eea2b4b588402927bf8bbbd6a550915961ace7c746f1a3f598016aec922e664cde15d536e4588626a2a9a6b472ef76c5d2c827569bfb8b23f9ef6077ad3c4ede674d2a69bf70ef7c7d09cdbcec233b6e30dda8048bc5ad3feb0850d6cc88a5f6e7904cce7cbe12b6c96caa99785afacb83a7c6cce72618c3acebd5fb43abf9268dae6b394afbf169133c2df8c693f4abd765615a3f68346662b6d9915412e7ae347152cfcb139345d273ae4cc46c62fd869ae306b19c79ebf58a033a91acd1daf2ed796b72736fc388d42a2653e9686a487642a9727c887e96d08bf6667c6ad933236e44cbe1a76bbd3c7005fb8929e20784de2b5782ff73d5d7a5386fe619aff0ac8c10ff9633623f7b04f170c20b91ef9188cfce47d16dcb19728e318c4ace659281a41de9d755e5926f2f147027ded0cc5b17bf83c2771f0abdc2f3a45ee7a73dd13652cab2d96c858271edb5ca221bdf6285620b20ca513e1e8955251b6d7b6a1fb16be1f0a58e877b66af98e17f650fcf6f28e3f8b5d48261d6e826577177523ea172a10ffa675695c5c310b473e1cbea9ce54661e30d94709099cadd5bb6a5bbd7f6b50832d98bafd061779ed360b1a1626111115be3793063cc5330b1c0642f87eabb30e00d6fd2452b2679270bd1bb928ccb512bf89fbf91e101d4df6adf35a1fde0f681d7665bb93dc737b7697d6108e3b7061e17ca75aed8d25cd41c0d486026e6fa73a189e7b0b8ec54a71ad107924fe12e8b3da8fb83eb91941cdc549bc36abd439389c7cef3f1ab7492a03e8711f44b27ebb58547220dddcc4b1dc6349a49de1a0bec1c40408d67c5250c3e4b9572695ad0fa36eda11547076a00e757c44fae4be5c3242047477962709894e70ad9eef1eab1fbaa295ca981e0857421425364736b8196c9482321b77eb7a6466f72bda3b5a421da941aa4de1359828140d5340aba14684c9ecb615b2724061c4b0b824fc663b833b9edcc797a0310bc45748f70baaeaaf5534603817a2bb76256c7029325b59980fe2a6f1ea92652dbe20579149f0016b7d6dfac0fc6ef755c70f595800a75cc1054d364dd155277ea287e8470b237aa38c86d43a0851382de5c01e6639fc205c8c5c2a8fb98d78076a715b1b2afa9148bd175b12671d7c585fd6c02629e9c8ed514d38d1fe1e4d4bef6efb2fc03ec5fe65bc09db2fb6e3810604de46ec9b4062f2c1b909d5f6fd69359afbe284f34040e27b2d37b9186efdcfa60903a81ffaffe5aceb60064938ba2e7d98cab7c644b428f798de6ec2403d055e4d948b7530559278e2796f6e45d6535bbe4b5d7b531ef8a2f8a000a00000000000000000000000000000000000000000000000000000000000000200008479ba50978705740672392de8831e84808800000002540be40001b8602a80540535d30c63024afbc491efac24f40ccfbc5c81bc1babb81bcb8da231661d7354a33bf644f3a8569e18389f3aff5911192ca5accf2bce8c98a9540a6ab1098b9e0bb86611e11e5cf067401841b1c7c646dbdd5c38efb1c10228eda14f0b"));

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block255650, tdAt255650, block255651, tdAt255651, trieDataAt255651)
                        .withDetails(
                                new Address(
                                        "0000000000000000000000000000000000000000000000000000000000000200"),
                                Hex.decode(
                                        "f846a0000000000000000000000000000000000000000000000000000000000000020001a00251c8e62e0ac02f0bd4d9f2e786e65f4aaab627c46f2a6aca6aa32055d0c1ba80c001"))
                        .withStorage(
                                new Address(
                                        "0000000000000000000000000000000000000000000000000000000000000200"),
                                Hex.decode(
                                        "f9020bf876a0359d315474b06a3da0342531f4e30331aaf5d45f42a3ea4de00157bc46f0e197b853f8518080808080a00579563dec924478bad405984207dbc957431a3a39a15ae4298052fe29a3a9df808080a01f6483962c4706b81578f451b998dd66f71dae6876ad0d477dd14b12762c48d480808080808080f868a07aa7374e4d3ae18d1a6818a2a4a254a2ae4d2eb312c714d8c9045d9deea23e74b845f843a035c749bcf708d70b69d4d2f4ebd726038bcbebf9ea7ce8481b6acc1e12014e4ca1a0a048613dd3cb89685cb3f9cfa410ecf606c7ec7320e721edacd194050828c6b0f845a0eefd522785c3bc1f41e83e3f6b55c2960b9fe022185d4a4c7c65255705b3defaa3e2a020bcbc2f082f4a7561a5c1a2cfd3353274a2cd5162cde722a9a8b3b8df0c7bfb01f868a07e793d9c960a9dc3b49ed8b369135a164d391af681a5ad5a52ba3d51ee08a916b845f843a020c1c088cc9453996779630ad3af45cbd92814828dd784cf2aa12df95d1b8afea1a0a008d7b29e8d1f4bfab428adce89dc219c4714b2c6bf3fd1131b688f9ad804aaf876a060bae2e58defa34db5c4e96b5f3d520d0e139ae15dcb437b9d554471b12ddf7fb853f85180808080a001a75cef37a238361422c5898fb6d57db4372e7faac3e366b23e323229093ebd8080808080a091233354246b19eae15423058df04dfdf291d4ab333b04709ce12a34c2b24951808080808080"))
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block255652);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.isSuccessful()).isTrue();
        assertThat(receipt.getEnergyUsed()).isEqualTo(42256);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "9e54adf6b73f759068f1791cf62f05c4a09ea80c57433b052b258093312cf492"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "fa81460e89314a8c61376a97d8600dcab3ab257c2979bd00bf72acbef65f5111";
        String expectedReceiptsRoot =
                "dc9c736f63cfc0deb0ee64c760ec8c88db5392dce951b0328b374fbcd5d91fbf";
        String expectedReceiptsTrie =

        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));
    }

    /** Tests importing block <a href="https://mastery.aion.network/#/block/365432">365432</a>. */
    @Test
    public void testImportBlock365432() {
        // data extracted from the mastery network
        AionBlock block365430 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d0183059376a0737cdda511e1eb5567fc3eea277c91697c3d93453238018e0237bd5b3206fc88a0a0450c4333e72ed26552d7462c0b3669924eec816a219b3960d5b3f0b33f7444a0106dbe7bf85d3eb52c03fd0e7f89fdc753c4d767470b442ba510df97c6291793a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bea041494f4e000000000000000000000000000000000000000000000000000000008083e4c999845b8e9a34a007eb2ced7d672107372260b1b0b9dc7106f82115809fb015919ddb6c3309871ab90580008688b89d06fe296d803d181b13384cc2e74029ba060da3b67372822eafbfe4695a0729bf28c66b132b4de61bdf9ed13548eb71355b5036e67a72cb0524efff2768437f5d25b0197bb178ee40bea13bab5a8e46f47e31d7053192583a2271a7505ff91a1dc74504270f312c8f300e3032a2b3caf2f476bb0c653043d4383bb8cc3d15840affb47181042a1f3420b5356faeb5b7041cee7f5e0c0d2cfe65be3a528e7d71001753799c5028d9162a68e9029a3824e6528febffb9da75d97b71030c27497d82301732d30a2cc26622998a5a2c9aedf40135c1a4f9ae3b0be94db37d73dc07642acd1fed822983465a7fa9906f0f7f3ffa4165486d98a0cd852dab6ceb992c4936416a0351997de9e46b555cb5270c0d12367915de6e212b72235ce1d8be54943c5bebfb2dff0bef8febb01db04e28395ffb7cb38bf624bf4ad93c12cb7818b684fcfc71bd5999e283184862d1e999577de38e5f3bab329f37162d04b0f31c4795807c7a90895341f7d1aba97e6670d3d70657794cf05195128e15426f7eeeee29dd20ad387bb20a4706a0222bd3d13325b24a8dbbcb0a07d168391ea20c7a7b1a1b267491a185a02008deef5f1b1b63b09eac149311c053e32ca5d47767406177873db81dedb8367921cab4d622f77d47e7aeef35d899e32d8641d2e48e822c36e615fbd60b553266bc2d0c4a075ed7ab89e5d3dc4aa913984c2b51f036f289af900bf87c7b6570fbbcf8071220cc14b1aaceec2476668caebf3e9a01be7cd8190ad53b4726d0ed02dc23ce37d767f7ecbb621278edaa106a9efa3ab39cf4f8ae364b06f55e20c514b759a30d22334f3c698957e0ad9c6063a337ebc869454534466d08944e1485ba40167387f033bfa5a406a8e9b924dab90f97cc5e1d5100fcfa0bf54032efc66215b59e37065110b7a461b3c2456be1d7051fc36a49a587831236c3b226487b1521f41c11a96ac643bddf4282fdb22a7c75400180a512defe27307b0e780634ca2d666c14d9346d0a0e1767582ef10f792f858037adc21733476716ee08a3057b957ade82f074d724696a6affb7cea8f04a37f28e10add261527c9df07d5dd74bfcfbf061181d61b512430ed52114e86315a96668916f5cb9e47ae7dfcfbbcde91fb1a2c5c3d64b4dd96b6834fb819015e53f5ff397ed17d4ceeae738ca587f41934523cbd2ba180b922c295525c3bf3452eeb8907cf8f45f2a2a9c1f481d983d5014034c3681c712342610412350391579758d03e57758b90386d3853587f906b4dcc03f4bb58bab38cbc8a5715a1ee83dd73a44b7389c758121ef8202952652d35a38504544d74035870f8df971635eaf962e764b62d33c02f405259b733850e041281b73aa2c0fd0941d5ea97d9f1c4131c7d2e456975ba8bd875889a69f6e6966937ad6a33181f68e05ac8cf0bcc2aa49f8167ab88625d0e718a13419d0eb7bd407cf74354e96b7c6d383ab543a360eb40358b7323b33819158b2910f6115795bdc3ab03781da3794cb7679ed5f247b1fa574724b580718405b7575580adfb24e693c354d79dcc8712e99f7b6f75fe362de8f4cad25cda5de51bc397be782f717e3051ce7da386ff903bffdd240c63b422be1ca48c39e44b904debe62406711240ce64f59ebdef49e754bf8fec95d2b57543f2aaa2716a3ea3ca5356cfcf5ec6ca8b32587cd5cdeff69322cdb276d174463bf2d662e64fffdfdb25b18827829fc04a99b4eb7e164df594fc008bb5869479b4fb12eff9815e63ef037a18e31aee4d427206ef0a006eefdb4c57811e299157476323633d3d0770c77a0860a680a3fc85c1d85836d8559aa61a71e9b354796d648e79d84b23ed31e3962a76af2e9597c44902c12a24b9489c9f5ba0fe5355a8538a9ace8d439f2bb8dddfea5d10e20d53a64583ba2dfe366b88fee7e1f1150111a40986b6841edb0aa72804686c0fa9daf785ec1a7a3d30d9a1b2cd82f5179c0"));
        BigInteger tdAt365430 = BigInteger.valueOf(13722035);

        AionBlock block365431 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d0183059377a072a9432f16606a4df7e2e450a015cd51af62d57be35243072884c6ee86062b25a0a0450c4333e72ed26552d7462c0b3669924eec816a219b3960d5b3f0b33f7444a029aed00ad3e2a5fb5a9de50ed924d7890e48ca60fb0322ea64b8a6176dbb68d2a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bca041494f4e000000000000000000000000000000000000000000000000000000008083e502cb845b8e9a3ba056e2b9ee387d4618d55ef58a8fd9ab475b0568e7700e258d42dd2e4625b91f44b9058000d0ab52953023b6eae16d02bbdc6616e2d81c2b1f280692923add56f68cf84a30426d5771758661746d15b52dee16049369a83cb07a33682ee5ab6a5a18f833155f486861a585c6939a66848d51554baba6492a06ffb95e10661cf950dd04fbb46d02555b721d4836d6aaec5f4b12a983facf9461c1ed81ae3621928c28e4f1a4b1c76f256d14b21d4a81a9733ee13bea8972bee5b35f20efb52dc23a3e50083241a649075254d16973a9a35d2a579703c946d0c3680c39fb3f7c1032e9676ef1df43e2452916102d0ec28b67f979db1d52420f237d284ff671b8de1d9f0fa35ed5857e611d7e4753b9776a58f0dd3b901055ea1d5ba56714709ddb9457b6a5fb304741a2ead58b068b3c54b3679cd437daa92ef33e25cd56cc5bb6b7a62622e5050f932bef13129b3da65f46b9ebf0107969de16a600cb97a712ce76b1911ad31e54bbb85353b3c71c4989b1b96f6b80ceff597f4bd56a3f1ae5e189ba968c04f63e6378734980b924d836cb6f5acc4d4c907b9a433a5e0b9226047e096fb07c4ebba2b7a4691cb677c055440baf9d464a35a82f7b5d4f4bef1c4eb617927011e9458f5a82d7269abc5b88f345dcba47dd3a1e8e290b40184dffcff377a570313d0892b89b24e5f9f3e9f1c94c4306528b56e7610529a15ba7afc739403c351c37830550d3f3c623ec4a61fe11ed521fb2fcb1578cff1fb47e63ee5bb6fba75842b4f8badb6563c0a15ea80fbaae9a07ebc1bfa565d86fea4f2a18624fcc0fa35b717bffaa11902ff08f97fa5f332fd92aa16e79bfe4a61dfc21360eeae192cc66b48a5cc3baae242b207bfc23683aea753f0d659aee75df6869290163b2478684e956287684390ad07a3e69937d75a1e3ae0c5f57e0b55d8ff7beba771041105f6ef545b5a86dbf5b305ac18d07a5f3ab0aa60be918952281611bc694b031f180d2b8a6a6165c6bdc40074a60a56b848bb8858447e86f74bdaa423375a68d018ea3770ca6b9011c5a136a621a739747890d5f0fa81d9bef97f5a1ebb57b166941b476cfe6fa51902f3ed4111afd9e5ab2a14fb0dd031e1bd8e2e5058e6b39179f41c3b151e0b5a6f116f74a470cdf5904d980a4765d9d06f23992097109b861eb7d23e02a66a103f95cf4caaa430541530517fc857635196ee58edc68394b25acc43c130939b04d7a6c4431eef62b851107c0e3b6eeb9cbf424044e06d4034febf9b16d9b62df4aba1cc482b573ee0970e5571fca37cbaa516e599beb8d7eeda55ab8a2171afe4d16d841d041b363b130a289a4a548044fba78682d44c9ace0459f6df3f00e34a559ed3e2610fb9c56fd2ef53f0f6b5b6ddcb80d27505133a84e785f6b76cc030f3cc72a2285765de5850b7e3f37565de8879b71d3dd30714a96b5e93fa92835ea5b13c6a0d31c1751ff81eb18b4fdb1acc3b2e5e114c52370b9a9e285d559a761fa27823cd2a4e6bf19a38bbe57298de1b2fb67fe3a9982048db48d85e0a7581c91fd727cce2b9f28a548adf17a0fda48bafce838f766b74d5266f399fb2c7b05786b9320385d3fb565c5db3274366a39fb226fab2f1b3f485f237b28ad48176b747fce0e391f126ebbe40c815c30e807ce084c30f54b94a98efa3d38ade7e59ed62ebec5f1248272c4291445cffdaf8b55b75ef8e4dd8e7f79b2c311550ed588d51128b0697d302702c736ca684cba33151fd511f3acd532bea1c26d26d26288220769719dd4f00e3e03f0a0a5baa6751cb860efbb6d82af4e4fbe4c1e67648bca51aaf80d6c0e04aee377e3db7bf35f39ab0d13f3c7204ab8458f73cae825e96b0ef0a2e4b036ff9249867b1b9589390737ff975b17ea987c1b5c38b62daf142b9b4fcfad083dffe21660c681a1c9d63739a6be942754a16f6c7469c8b4e0fa666c1a2759d676ba7cd126293b894b937b53e03cd4ab36a887e34596585a710b8c44e2a3b4323f4e85bef43badb67317112e87fb7bcc35c0"));
        BigInteger tdAt365431 = BigInteger.valueOf(13722111);

        byte[] trieDataAt365431 = Hex.decode(hexEncodedStateData("masteryStateAt365431.txt"));

        // block to import
        AionBlock block365432 =
                new AionBlock(
                        Hex.decode(
                                "f90839f9078f0183059378a094c401109986a9d054ecc730a08572453b51dfd0bdf155dfb5b1188585187608a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0204b0b88ce011b0d3e351d1e1fdd6337338fb47d15401353e926ceb82d87efa3a044f852c7963f3c7e08c29979feb7adf9a828d73e215d355a22bc3142afb4edcea03c266609eb7f78264301a5aa138697b44d00dcc40bdab92a44d66ddc8f29c093bca041494f4e0000000000000000000000000000000000000000000000000000000082520883e4c98b845b8e9a3ea04040728811e02a0994d31b50cd69eece68a7f87085b0f937429bc80ab68204bab9058000a4cd21e9234ceb5ea9c43b0553768f53d4f125ddf411edeb2ae8e86d5371bdef5d79eaf0a5374d8eebc6d304d7fcfe72506e36cf6f2624ab6d235af4f962f3d85d0a2d32199af649adaa1db5afbf9f4b338be99db26f002246d534e17293f42afddb7dacc5ffcef91daf2d05612bb8f974b599b808b8a2b0361463982813c9a06e92be22b2d11db0289180b4b0638e9d33b32e0dddb1bbf5b1916b2e91473d4f1cf9d194bd001311bd4be9cdb5db6e0234def670a20d5bb8945510e37ffc939211cd6ce9b325c02bf49034c000aaef4e6ad825d7f46775c671fae01302417551b466bc2f422520e87f71a5ea9279703d3732966a97cf8bae3a7468cc402d5ea265369b95bd6e5708b986a65ddb737970a0b13ad6220d3ee680133c3e7f0ab1ee3ffd3361123fef6d483c2164d2b6763859e8a7396b97d1c1e7092774de933b93ca614c79d5a939bdb4742031d6604c5ef7f395b19126a73f903c39a5b59df800afa84cc9644674eb048010985f31a5f8b12dedd70b29c094e90387874c25f2d2617a6ba5bdfae1617cfeaa30a199f41a8841aa29ca2e688c71e026170446700e4f50fae23b96974f2e2dcce8a56e329d761c9da9377ff00110e1eba0c6a0e3a36e79036f2f8ae6639a4d2d60d64f4083c29a69560a2bfeb583aba35217f85efaf90a0c0d64c19f0f05c878a25f6851abb77d1d58c156b76c7422444b7d1b59d0753f082b462f6e298a4bc58abd43fc023d51a2ffc199c5a563a6377e62549df4cd7fa746182f25ed0fff2e3c2f7ecc2151d20a071f388916e40a390b3a649072d502df9d54a7303950fbfa19748da882db16c81fa592c6b4ecf2554a2f461e2fc5b937916645820b20efc970639ad03d370e4b4489a09789760e313911264837f56f2c37c3fc7a5754493f3ebb57f5ae37961332986a0f22a54730fb17244003e59bea3c099b76df12616a96c6681ad7986e5c5d8660663d8de9e14bb60f5101fc71dd87d5283077f2831e54f5e832c3caac9eac34090631a6e07c293db4a3eb264f2a4f2ba6174baf1478042c2235db9516ec155a4784d52385693d37057a1122126294b2a4255bd9dd504647472b14a17528599c3a6108d89dc2da632ed73fd37c7c2f428a945b7337719d073dfc77fdc5c5b505daa664860f8fa178186d48ffe3a727d1757e129554603fafc865df6772b28cbc28b529ad62c906927d0a288ebedea78de67767f34e2893b919ee052ab27de99c699bbe62766d218f72e6f7c935b63d1630e74cf71cb6c3cf242923908f2e6f902b8c6732f39d0ecc80d791c1ae1afc9ee417b18d167dab244db5c4341c1363eceab5c8436fcb7936442f0e4c846d696c35470afb9f1bb0649d3e3dc3a8362ee9a7106712fdeff4070ea8cc4bba984bfc7ae5274799e2ae85a819d37dbd350b007e2b34b564b0398f7b62083e28f877b1d2bfe0771657c51ee27bf3f57f22b62856f3487c934ca3ba0dc005c1cc6d665c129cf1363b07aab2b3d93ef8bfff8283265ad992ab177e53ae9c5e43a2e3ae9e2a3c9bbbf5210720829ba971698f7f68db1f878ba5c371fe5dfa63ae29796bd2a4e5a6faf4ae16381b7d2f6925e5cbbfbf2705f1af97c0993b267acf122584211ad8838c24d71feb0e8ef23d652603b232b1f06de8a9f1fd28f1abf87b521116ee2d2cb506faf5915b56310ae6412cf76d3f38c019bb85cf6d23fd89a945c13930492551b699fd2fa0160ad030cf7139306a6dc73b5ed4bdfe5bf714c1e9a43313fe09005fa4ac3ff4561c4a4155b64348b44bfd35310b3651e2fd3371acb0f34311952fb1d0b50397acc4e71b86e2f0a433c4d2b9b46554cd92dde94bd2d3b5f2af0d6d0e345386dbe0ec9e8925abf9b4c91450aa1ef47811805d08329c22e639873f15ed6df121420eab8a0ded137fee3ef574c5dabc2c793b031da62e44de2f5783a4472b4e0f1ac50fcefb94d8a6680ee0356aa457bf5ce8f8a5f8a300a0a0b88269779d225510ca880ed742e445db0c70efb1ee3159b6d56479ae3501f988b469471f80140000808705750cb0dee7e882d4318800000002540be40001b860b7dfe3a9fd46fbd034687a6c2a3ddfd61896b8e7521402369383d6a52a591a5ba8b96ade2d2e3eb46bb10a8472e7925e0133ddd20c04cd5c187fb5dcbc6b79bfaeda60a2c58dffbd516dcbdfa06f9309122cbef2fc7fd199b87b9df6f939480c"));

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block365430, tdAt365430, block365431, tdAt365431, trieDataAt365431)
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block365432);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.isSuccessful()).isTrue();
        assertThat(receipt.getEnergyUsed()).isEqualTo(21000);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "bd99ffaba6e054b0feffdda93b2364ecfc4914352a73425d2878a3aeb8fba7ed"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "204b0b88ce011b0d3e351d1e1fdd6337338fb47d15401353e926ceb82d87efa3";
        String expectedReceiptsRoot =
                "3c266609eb7f78264301a5aa138697b44d00dcc40bdab92a44d66ddc8f29c093";
        String expectedReceiptsTrie =

        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));
    }

    /** Tests importing block <a href="https://mastery.aion.network/#/block/720107">720107</a>. */
    @Test
    public void testImportBlock720107() {
        // data extracted from the mastery network
        AionBlock block720105 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d01830afce9a0c268b39a9a9dfaa981601f3402d0a075da6c8869c6b5c0d4e41b91173658e535a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a08d70cb7a343d01820f803bdf9546549a00f1e3624fc3a6d01dafdec35c59e479a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bda041494f4e000000000000000000000000000000000000000000000000000000008083e4ec01845bc5fc8ca0a8ac3f1baf5bdb8f116ee24bc634219d2bb5f8d2ee800481825f0113dc51ec56b9058000a142c05473b5dda6a52828817508f9f6fa10ed0d420eecf478e612402f61ea2523f0d0ce980e9aa57cfd2301b5d8b37e7948b9b392e457faf20d60fd6f98b79b6b0cd5c0cc62bbcb1fbe4e9b1c73ff72bb06bb376ddec702a586c4a5df0a58bf395c590c967bd28b7403fbb6a607e46c540745de06608ada2558d1ac2d371458ad212e16532ecfc4a337415bf15a53fccf01b537a7e76b5c4e1e3edfaf78480f8f327ea279ee0eca4ea91884a9892c01f46747b7a482555b051b09f496f7fc0414b7a233be1b8a2a4cdd92892cdb409e9999e26e5e1a47e53ba10f06fadd6d0f77472f314e6455f121e8cfb89f4d2aed8533338f5ebd17ad1c6224e7467f13a4c3faa84e2b8ed00606c0e6b3535571ac1e207e345693a66bcae232c4e80c44eec87b0e3e0bbaeb1f2575c5dffd25b28c9ce8d31bba590015076d905ec0b933f4cb800ad61983270063573a467fe5cc042f7618678f8346eac4f97d6ebb7c7a012839147a9b54d8aeaecc32a0d2a962452628bbc9ae0a782cbd84d32ccc0cdf720ab0ab0de85671177a466a10f509a91df2b253e2c8ff6415aee4d4a825d66b880f6c8a1625bdcab524ebc73c7cba4e2885f89d34fa82dc056e5ca9b2b682d5be3d51302fe53078b58658fb77e110cfc512978d54f6f7eb3b321b6ef68b492026f8624224782ff891540e99374ee530d813e5924514bd56468b408461f8beb8a849a5712e8b63e6da55f9eff4ed00b40653eed785e337c7a372544f0acb4d9b47b39ff7a98a27e38d181c235dad2011068044662b9b0edcdc7f9c3f16434736ba9c8d5db3a22e1fa3c480548820dc2b9ac41d960315ad19908df1256f3e5105a3e9a6df10f34b9413997a3e259d97dabcbc5c28e65d800023511ae1a5771b3e4f79ac03ed04f77e373f7791bc01f75067f27cbd24da629e718775692ad5fd262338d7f912a4d2a2d09a6529cb7cedbd4c42ffe90c991c9fc4178ebe193e4e3201ba1f50aac3b6fd1779f7320a1b9953c5d0995bda4d06e7c54a53a555df63af966ca1bf706fa74094a523831f03fb3402953aa4398ab34283461eb567e2a526cdad345b753d645b3325b95360a1e343d81e4c70497f7db203f7edcfede12e809b66710b07b83ec51744573cf88222eda3107de8e4c96d952e52873212d187484a79c8a9161fe3f5aaf7b0b2b06d452390693d3016af7faa2c232088e79f39a42a2f7515473b41bd14b72669aaf71fa702c2fbf6b8b49f50a30ff791ff76f0a5fb32a079fde014f122e86da4ba16fc3a5c2290cd898f327f6d7b9ad01385492dd69439cb3c253a21e0fe71a303f4a6dcc86158c3c3c0595e28a97b653d7bc7974ab83a2fa6a9fe651053eceba1c36b991cc3d5863d562f245ba198b6f69d2522c28289e525d416f3ef348b2a4d20b68e12dbe7b520ac719dabf33ec77ac4bf38b12eb81d34f94b6c2e632ab621034c236a5f2b46b72f32cb924083b5237d5e90029a5420f0156f60db34ab06a07da884237a567a47c11c29150b29f2904ba27e6331894ec93ac50069f080651931696a8111d3304bd0121cf7758e0ce4327dd7ede51c1faa1911bc512e32d8fd95cb2294f69c627777533d04b37268fda8c46828c3e10b9c966f2d01ed7363ff653dcbb650d636f2b6b09d5f48f0a1b7e3470615e7f1fe0656ab04ab67982825e4d80922d253addb37303b756d0963e6482e93af8b1aa4313d1fe1d1190523f2384dd6044b43ce1621800ad929c6508533366af835b1b6cc4c10628fe1dfa363611b4f92510c6385bf5bab2df4d72f0ac4dfa53588b3e737ecc44d852606ec05dabcb1cab418216b99386315b06294dd712e079f59fdd33c3ac0561a9c8d4e2fdc4aafba30fd552085d6413804e3a35e311d0092c3ab96bc1f6a70b52c743abcc8865a3674798c33ad72177c77dd57f662b93c24c1b62e75810b96c1b93bddf27d8c445a3823ecc372065685c17caace3b3ff3c0"));
        BigInteger tdAt720105 = BigInteger.valueOf(45_970_838);

        AionBlock block720106 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d01830afceaa0a249182923b537b2ecba3dbbee78903cd06d908ad6bf81b1261301df294fda24a0a0b1a9886e79fb139cc2b3138795d86a750ce07a7d0d63610dd5acc2d52bc2a6a0c04b27bb03c33c8ccb3ddf87b2b9714c20d95e091994caa10e16ed191eeff7f1a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bea041494f4e000000000000000000000000000000000000000000000000000000008083e4b2c6845bc5fc95a085483817c039c40008c156f7f3fa5179730a7de8dec5dd5ab858d71c9f74f8ffb9058000509719a4e4c272135461202349a9ed19c2ddf4a94d3263ffd8d914c248961c69605b82dd3589f07271eb20035e7de3ef6fc26e3f7a2e0fd7b4af544620d7786e970d98eca2553a22b22d6b7c156c98f677f32425f3ed7f17a43078d08725dc790064276e3fc3f6be2406bacb03598f2fc97cbac235ef1be670f439cb1c2ad029317d0e321f23dcd58abfb7f2d2a853a86fdf11085a483ef10d3289454c244817d3390eb339ec895d6e85ea26d826f404e474dd179652f45ecfec6a9e59e9f21766ed6db57b0ccb8fc2d0229b057fbfc152cfaf926fc84e1e6d67cc077430b3d4c0e4353038dd377dd9aa0e7a265e7297fe363e2de1bb26b13366cccb43e9c17421b4d2fd5e0a4805069ba75656a9427fe4739bd803cef89c1eecfce9f3094e9c5d27f1c9cc8b764757671e10efc87b48fb59c4145c83fcc889e2f9361a21364b8b9f94666541bfd26e359591729ffa5f83b2d0163855516838b8d1a0b33f060154cbafd43f0897fc484e1ab2e964a59247d2a74e940a1eb7dadbb775403c442417ff63305663b090198b1f228bad2bb5e70d3ceb66f457bab3463ce707143b877f3a6163907f55a4a9e6b3e53f1313785968f163ad3e8d046a4ca1d4e7994d62699d1ef921d60e65f2957d5a560a5bbe6105b1a07c0cef9715259bfa11f299119cdcef3e09cfe8452589627173db62d516eba7f86e91230b4b77ac1e5f8cb951a9b3dab47acd0b31071acdf632e13a01f722f98fef5386be950f53e62222769da596fc5b9203afae7b480b067df717cc380079debee73392b27b4d02e059f5fe25ab52576fd72776db148cd2a9b06361f81f95061d7c94e94bf720b4363bf32c3c45d3c37cb0ac1321f0c7907d423f7e785d7609d2794bc7a96125936e1a90033573d6c681712102744aaec36f59e91271884a1735d29752f2391ce16ef9489a367ca6f98354faf7848fe287e3af6bd061b48d3397f233b3903a2dc72d473d00568d1e4149379c3b661d7c853668659dc0bd3f58be069b73effbd0a221595d0b97d1ba9d6dfa88aaaffd7229d4559df00d84dbb6e4a92eff11df4e555226eef271329756f71247cb566d8cd7362c1253f5a48dd8688ce103baddcc32314320b32985a50ae32d988b5038f9662d40d97d23de1b4b0baf78544165dd36759a8ca8ea8d6f2ccf954beae5a690ad7aac634f2b6582dc638cb6ff10474a5df8ec460f8e2f8da04de90a2694ab66ddf55a3e05d49da0eea1a64478a54e0b74d89be4f0ef1ecc6398143b99a5a8135eb67f2559168ec7e148775e001f37f40f0f563abc3cab527c2ac8461d318f2779326578b3e7168ab9b24aef1d067cca1c96015eb5856ba64d760e6812cd228a16b2eb7e50ef261b11828f26e34c0814e62e554da1e32ba5600e21b487929052f644ea5bf37c3c182aa95e80bc78776c719ff55a932fb7399a12aa3d93a1674cff72dfa8ffacfd3a7b8c83dbed749a8850ab21b101c0608b916099b26f2f7a0927ce8065b8d5537741921837276ce77b8e72fde4987795032598d901bbf5e7240ffa5d7cea6cd580f61a742db0428eadf906e1f9033d65daba805767e5a12226409fcebb13afcacc617330d906ad36fa3df3da0d622986d1e73b7e9a7e34b47da854175feea35a2444375e668f1a7273b25fc51f085680e21cca32c953b69c48fca256644d6219297a32f9309f0f22a7c9fd6f42320775183c2d426bb3d40428b277de8704baaa978c06694f201423220e5626ac6d0d6574a46d1de9dec9c5d7c59f7f708a3d737550b43a29f87f1772070e38ce3f52ec0a2aaeb47413eb5cd46ab24372cb580eb4a5c86c7a7e7e733ecc24493cbfc164edb330b19e05c88af721a50a3b73c83c30f63ab0f3dba539b878470671c2ed06fc0e8b3b5d1516765131e798753439b3615691ef1e484bacda3cda61877aeb49bfc9afdd2aa1bc58cbfb412977048dae4a46a01afaae3a3ab535fe8b1ac0"));
        BigInteger tdAt720106 = BigInteger.valueOf(45_970_900);

        byte[] trieDataAt720106 = Hex.decode(hexEncodedStateData("masteryStateAt720106.txt"));

        // block to import
        AionBlock block720107 =
                new AionBlock(
                        Hex.decode(
                                "f90814f9079001830afceba054b69e67645239926bd599c339475d4ece0156eecb8eb36ac69666fb9889c0d3a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a001edb39b08a9d8b1b9d5dc3a0b56725c11ebbfcb1bfe8f4fad4d26a91e8f58aaa0e6f3bbde6a6fecfd6208becee49dd07b9743cc956a9545effb514d3c40167075a0280e14a353e99b6b9c8df8f4c7f26a8ce336b5e8434e8b4382439d9222fb3015bea041494f4e0000000000000000000000000000000000000000000000000000000083035f4883e4ebf2845bc5fc9fa09e356161efa658aaa2311f4dfdf369a1b75bd14e972f70b33fdf17b4e531f8dfb90580002268a3591824cb7922d053c52b90f9a58a4da1e8161428536a1f52337f9ac60a24c01919b41603c4e4a0ed2024255c72c3802430434157c0b214ac2b9f4777cf5a30a8a54c7b55d6a13fe44d3a40769d7ac6ed24bc95370d228f9899330f61f3e5390dc2e786e7c9634266861b1b22c1960533727e335c6e237499a2d472e280b5c8d111228a1854746319d372a03718518e12e632509c737818867e719fb1b830acff3829334d8a5762fff3f384f201894303fc6ac2a97c04f03c0e6ea232d49b92f551c9127561c929757261f90103231324ecd165664799bd79052bcae7fbb5768b657efe8c6c13c4ce4cfb6ef4c996083fae8e6306133570f85661ebcad6efeb09ad7144d004a95a25aab1fd6765baa953c0efae9ee66af7b3e7920b7f2a5115e2e93a8f32801e4d3ad8fdf4d6f8635fc40ba722a49c1239d967e47717c1f223d0e6f48738f9d4387e93843295173c25a190642dcf2018dd88493d65f900b8ab47596540a85b40310294ea9795f2f1ab1bb1b93e35fe71ac1975df26e2435a835f5cfda5bcb17f74f214b24fd108cc63c03365f229c28a0e0e95e47f6db0e41a9b0f69d37d0ba8b4cec6930592a942bb0affaf8de612bec4ecca81cef622d08888de66bfe0792a4fee4295539dc7f23565ec296755e45cb5edd4f3f91571e806f913edc181bb9154411f63e51732ac86107611b872b80f5cee5247de887095ef341d6c5aaa97db1a02c07b58360a8a2d5369d4331df49e8324844f448c229cade19b761b884b026b522c3e2f29e732d3e5b1f987e0f67f32b40e4f80974f645332d547da34346a3fbac5334596e7aa2789754c3e36429032192731d4f912c17607611b2a600e3cc95b75a51603283f613f04ee71318a4514f1310e125937d4eb54c503e8c3ea1315ceec2cb146ea62d65212889614d094976193dc2f6233a364ee7b79d4baa13d22a4f138925624a7acf00254c45377bca8cddc76109b00814bc397fa709b7a7a6e0773388b08b9d2ad3e8bf107d057d01eacab687ef19b119f31510daa1ce96a5a4a018d6812d170b465e43a3b140f9a36d8f9db7ff200fb0761dac021910bb3384c7c124bff00738583c3edc6e206e4a7e13a93545d1a1aa44f930e2733960877fbfbfe15595b29eb74ed027ff76923bd70fc53dba936bbb89c3e8e52b8b23cdc2b7879e86649a76204e9b95fbbd5d55da6dbadb8c6091974a0687a347fae04184615abcd4a011c1395a5f1ae15bcc4787a3357c82449b983fb5d75051057f47a73a7628ff1253243bf7b90d3ff01d73fde25667be91ca54d09b5bd406d3a15f9b9edacc6b751172cbbf79c09c49cbf9a8a1c36e913abe73c0ea33ad44f05ac80a9dc3bf8c770753277c7c77155582b8a7b469112a4a6057b28c3b5b53a1e5ebfe7111927c7ede8de231a05ef6876745a24dc91b41d7925f88e3825a2e60cff2ee3bfd9adb4a181e95b0159b50f607c05d8d233bbad053293494b683f6577b239182e8b823d52782c1d0278080a6d66a390c5ae1e126c483cf5d50c690efbad289d0596276d9cbbad2733f2e10ee0edd556f9db29393fde05d2ab4efc06497dda25780985628bdb439488e438701416a5910652aab9cc693844dc0f0a1465238cab742b3d0cf375d8d642993630924f01233973d69303f644881939cf3b1dd3391b5cdfa520aa2e364706bff82a3aa14938f1c0567ba5afaf137b5355e618ad75d14f61209205b659231927b2857a64660da22923bf17d243300902137ac38bc8ee26cdbd9994296a28fc6a23ba4032038a08fa55de6b946b8c2463fa097639f296e42b83223de22dee1ee3a9264268f276ca8f821aca9f9b4ae82e51910d58ef191f411869eab01e4e22e178f8fbb7acb36b123c298de7d5461f8c3afbf454b61318e136a90a7e61840ffed8c1d4fde8ed7d8be11f3b3a6af0c87750f631ea14391d8034f27d83ea2b112511f59c6ace2c213efdf4f87ff87d2f8000808800057859c9e4ca49834c4b408800000002540be40001b860fb9e504d2cec93c26fb2beb06c906d2f352668d73fe8d5ac02c6f96fa9be3d8cb15dcd4b277ab4eb7e174767f0e8e53e19ccc42b2c39e890bc3895495656fe5729a225b53f1924b30c04e7ca6d20fce5a355c2b97deb0c1dca0759c0bfeebe0e"));

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block720105, tdAt720105, block720106, tdAt720106, trieDataAt720106)
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block720107);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.isSuccessful()).isTrue();
        assertThat(receipt.getEnergyUsed()).isEqualTo(221000);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "3253da83f7b2c60daaedebf754442b21ba0d6a348a2e8d726e82624976d97341"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "01edb39b08a9d8b1b9d5dc3a0b56725c11ebbfcb1bfe8f4fad4d26a91e8f58aa";
        String expectedReceiptsRoot =
                "280e14a353e99b6b9c8df8f4c7f26a8ce336b5e8434e8b4382439d9222fb3015";
        String expectedReceiptsTrie =

        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));
    }

    /** Tests importing block <a href="https://mastery.aion.network/#/block/1016685">1016685</a>. */
    @Test
    public void testImportBlock1016685() {
        // data extracted from the mastery network
        AionBlock block1016683 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d01830f836ba0b8df60468b8c439144c6732a9a92dfb16f231451fea332c1a8685335f9a570b8a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a02193248857170a063530c435b350fb595c1760e4bd10ab1064a534360dc609baa045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bda041494f4e000000000000000000000000000000000000000000000000000000008083e507e1845bf3a213a0b7dc86680a173e3135fb46076c25e3cf3586dcf105a00ea637c49f60c90e5730b90580013086909467f5d5b1ecb12f5d716b60b924a87b5bf60d4f80b727e6f48a7f03cc0e527163e832f8f3ec9111080695ce18143649978dd70fee1a4bcb71ddebbb72652eaf9d01cfe878a834717a2f36fec15623c27379c87104406c4d13091330a83d4d3452cce3684c4a49f2db1c057fb0bc8f62002688b4714ca4999698aa1a08fd987324e358fd976f1c66fe503d4b08cdeb3f55de4c68cf1f559f6bba42cd31f6bf848a6093428280d917a0b010fe03aab12f9e665c305b0bba287c47a5c03938f87e110d06c42da9401280798bd5d527480990c6fd379a3f96d3223c2241ce7a9cd2ebd76c51668b6020255854720b2e38003f16f8dafb2b324e3f86e96bc65c887ea72515920799ba61a846e77cb8c89f0fd4b2ddf163214590a67d73ffba5ca5abcd4dff2a7175ded68ebe4894fab256d63988e1de27250b096354ae3e1ef621bfcd25757d05aa3fbf3ddb0036787be22f269b7b5fbf49b9fd07eb07cc02ce19f816b300c46efd28038a39a60e8da0eab9c93a1fcdc4f2a93608cd3d674936c431c01a1b58f1b3a60c072e3f12350285164a60801d888a10234560f4fb2d5d322c5d339d257962281b9e689ace6662a68a4c7b4b30084e23aed4e96d3fe892d88178af598c0906513b16962f4f4f4912648eb9bb43d646b305be96370bb3f818a91781fb3230852ca695c6e190254fe40e4c030fb0f5c718d8eff44254f5ef65fed61eb8d3fd8e7d52f17aaa4d08552e3b902f6f65bdf1468a0766f596d8ee7db77c8419b6295f33c30d0856e5124776a572bae5abbc1da3ce094a03a92efeabdf7d9cd344112dd7c1fa3970f6b8ef2aec7befbf16184abee63257f523edbd2a8aa677d6080bd5724a0934b6395f374627f44226a23573a3241d321482ad05aff65bb771ba5d424f553dc3c675c93f5c160fdd8d0c1b7597666cb6444e1faa27f478ab3ef36e111b2c7b2e8e37a35ef664513c2546807a2a6bb7760d0b01377fe73088476436e9333aa41b7356b6cd531b3bab0ecdae90890940197a705c1c574a377a998e26f7e38703e3223e829a0b827cbe5a309b83e4c8d9ddda2cf2802372526795e2497fd2155844ebc664fbe45e636bbd27179f6a018da4936375201928f75535846ce75cb849171a7252ee64e7687be7ffcd2b0c79b58593967b29b83f19a6387c575701646b642e3e29ef0be1c63a4734238d5143ab762f58e2197b504a7cb0e5fb19fc9695f87c7c09cfb95b3cda0f956acd1a0d1769fe3f110325cd91ab0af793d6a527b7f76da19e263b2f395bd6d0fdb20dc10cbc46844c2c9e9d3958604bfb1995de8740e8bfbbcf1999ccf46c42e170f0c9ab1ead1be47bb71b0e21d3ca0b70eb9a0437b741a590c1188690c0374b7a51ae9962178e0dfdfd36d96763ac245be2f7c4de574643e0255519aa68732ed8b0ef28c6df374105182f68916f67c99b1fa69fe7be248a9c9fdd028b213ee4fe7b528af5e73c076308c7f3020bbca3abb12048a600f2c5c27139399921177dcd9aea59233b3cbf50cb525f9305eb5e7dac96138dc72ebe77a2e6b1a6ba23003a1f43f3dd576236ba339aa636c25736ffe43edc62191e113ac7ade6694e6907b8b58f93c09d31df12f84b4f1181820942fcf2c139489a1e87ca853814aa3d015addd7242d0819292ef8e5206fd79e84f4f40729111d5a58eb04e5b690cf72e39b32993b6d7e2ef5027f515f3673ba044304087b57e1670b80234b470b6c533d802e1f51f6f82d12ab4bb970a552645242a2695b417b415c78220e1c0a6942cfeb1512119b7ae4de8490c71718221a5810b573b35eaa62f2803ce07a42bd865c6099761e70c193bc45e836f76cbc28138f793199274432ba61ab22b9f0b567044c38a7e9792e472d423d35215c65911b3b77bf72e498dc61a6641022b9c1fac124bd3ea6a6af7431c7a948c99fd6ba6e2f2b46e90a96cb0870f414a251c45a12cc35fdf367193ec0"));
        BigInteger tdAt1016683 = BigInteger.valueOf(61_824_745);

        AionBlock block1016684 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d01830f836ca047cf2933214befb49fa1832bb05d78f61054d40dd0e485145b4b71ba3966f54ea0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0aabd4efb7590cdcb5f267ee4bd61604b217e4bea7d089680a5d8be01d399efb5a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0bda041494f4e000000000000000000000000000000000000000000000000000000008083e4cea0845bf3a21ca01a10b2400b1de0ab77d53ba3dd25ce323880ba35a00ab85af5803b9493cd8a34b90580007de19157ce0ffabe7e7b5dc4d6ac2d2c2da7f1a3f603990dfb07c50d2b7d13ad60f2fa0f4806746ebc0d4704949eab678a7a8e6d8b9056371a01103a54de39014c119321dcb2063f49e52b73a6ccbee889ec5bd5baa5d30328715d8a28c401bca0fb4235e92748d4fb44e4c7170760990121f97181aebefd09d935896889fee5684fa31dc36b2fe7d701e3a7c5a84b1886988e06695eafaf0a5464aa93f807a644b079e46d27a1ca9cd6eb5adc1eb80174f46e100087efb3ebc327d6879039e8b464bf833619be60ce11d6cc0ffaeb8628ed0a46ef3a5e0ab5d33f0c30d9ce1ac180cdf4276e4c78753e2b1c55967c625f1fff66d514d739507e06da26a27ce82af7c2027fac8d083177de16720c269afd7c1c9ebf88e3e21e7eb475a10f941df4a183e9ebb54e2924de438d4f1af5e5f0b0e60d90449e75b48f2bb761a3121b886215628a3012ba61180e9f92bec268011dd0432d5671ea8feaf74e6cd76c02a6b23cb7fbb14db05f3f287c1ee91b8af805324e0d041a31eff311d964c98e7a239bfb89f21d22fe7b873c0f41c340e679429a2de2c31135b6f3a283d48d945ee7481d66c339f9b1f5768a179da9ff47a22a8ed1786c56081bce91e4553cfc2e7161725e96ee9447a8f5eb84e73669bfae726bb5d03495ef51cb2ae599f9ab63b786da2d930b1510b6286d7261c455eb31de77aafbf9ece4622fc5ae20cfb4206869df69bb0ad7baf61c16727f42060859825a8b6b5c183c261c70424a8777f908bd3275411c592b65e8b6d125bf4b6a25658109b5a57cbab2e7121e22439e24a86865fd3f6133688ac1773ac0a9f9ce4f387fbecc50c55a9a7ae8b7974ecec9e78c18b6bcb8690a05e4f6faf41319b1e43d3ceab36e11d81232a1325d3a3083054e47971da689116d71e6274dec88127b6ce4115d678ac2ecd5917cc7af1bf969456d82c89238a9474d9fc7c75bd91c0e252b26566a05bf262bd420b6044200d6c525caccd4c83688b1109745c16f07ebe97c9f381ff7aa48e9aeab657ae3768b0fa773319a9c08b99fbb0172a873ce2c6260b9439940b4aed88e17250d7bad496780bf4550a89902ed2b32a180d7613e7b1577fee15c019f71b5a2c4a2c419304937a91cfb2618b30cf86df502d8d46b40e7ff1cfebd911e2420ab0cbd640ab865c7058b196f0c2639e138782a6a6f2e0b10a781e0a9be012c4e5ee30906d64cb1ed6a4603a2fe9f27462d3fac0d029bc945aeccbfdb3a987d052e8b8fbdfad103bd0d36138aa4e0f95d18effec22a497e5270bd870002300910083329b093c9d6dcf384c9096bdabed7155611ad7b780a76e98ab63b08e83cb6ef13ebd7c17e95ee05e1131103f2016a90ae55c27aff6406692a3855592afef7026c0a94a184a86cee263523ea0b568980a6c2f34beb820a0598ea62e54477ff5358d180c2a720ffdbda70af921d25c772813c2bfe8b757b934b8f19ee2edc54e8f838c50f9cab5139e45491535d182411b8fdc2c750d02e765013e381ec47f29a725dc98c252aa34e44dbd1b4776a1e4d97d9e7e7866f2feae3cd8b35c2f9f11b84c4b7098f7889fa80f3d8144fe17da08384464fa52db3a3b919dd1fbc875275ca80016b9eb0239f15c528cdf9ef3fe34c4e05ff084968dbc9ebbd3659c8ee356789411b3a97d7233140fe163cd09738ba1534318173dff61a2f9b85812b018b172b97ad00ac8df07189dbc4ffbcd40f336a4614c2a4df80f3d291da0d207c00138d034942d6ab25111e9178aa8747bf63e9e5767290930141ca7940ab758d14c816c60a9d93be3954b826aee651aad2bee158a5bb3992e28194fb652a747659bf634f5f41fd31fd3cb6b914e58bc9753538207e083b7c8e3ec4bc5a460ff27b1b236a82504fc9df48b2565f3f5bdddf4a5494b3acf85b27c15da2ca7671a33b413ab0e897a3703b54ceff8f13423dabebb6644b431babdc58dd1b0862669abfa4e087c0"));
        BigInteger tdAt1016684 = BigInteger.valueOf(61_824_806);

        byte[] trieDataAt1016684 = Hex.decode(hexEncodedStateData("masteryStateAt1016684.txt"));

        // block to import
        AionBlock block1016685 =
                new AionBlock(
                        Hex.decode(
                                ""));

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block1016683,
                                tdAt1016683,
                                block1016684,
                                tdAt1016684,
                                trieDataAt1016684)
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block1016685);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.getError()).isEqualTo("REVERT");
        assertThat(receipt.getEnergyUsed()).isEqualTo(801005);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "9a47de6b5ff2e471127adf85757cea88cb422ecc3448cc3f343ab42a07bdccbb"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "dc4ca88698b4cd2b903300c07dea6eda97dadb9c72f006aab5b263d3626206c7";
        String expectedReceiptsRoot =
                "fd6bb9b802cc594a3790702ef4e1dfb54dfc0fb4a25bc851a956091001c9876c";
        String expectedReceiptsTrie =

        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));
    }

    /** Tests importing block <a href="https://mastery.aion.network/#/block/1023763">1023763</a>. */
    @Test
    public void testImportBlock1023763() {
        Map<String, String> cfg = new HashMap<>();
        cfg.put("DB", "ERROR");
        cfg.put("VM", "DEBUG");

        AionLoggerFactory.init(cfg);

        // data extracted from the mastery network
        AionBlock block1023761 =
                new AionBlock(
                        Hex.decode(
                                "f90836f9079001830f9f11a0e90116b4547877fac543c5cdb8c36c366368364c2258e47e888e7df3e3b1dc9ba0a0d75ca161e901ff63be33cc0ea3efda4a7609c74ba4bd1342db2a6edba5528ea096ed56f0053bde3118f727d288f7ee222c887ab922789f89b1f99c245f4c96f7a0b8c9a297c65bdf9ee3f3b6b8c3180e176c9ac2177ae2057631e98d3d9f7ffcb2a014d226e1d51580e92461e197604cb9a4f02d218e77868e0dd653e17d4845ea97ba041494f4e000000000000000000000000000000000000000000000000000000008303aee183e5050f845bf4bd23a050233ad6eec83fae1af3e1384a1d1cd3ab10df835ffdf694ebf3dd2291de846fb90580001904416310dc851f92470ec609bf7ee858e7f6dad0001d615c2be4d4b264881c3f596ab0e39e2bd7fc9d3d061e5edd6623493c204f5e187e4eb626953980f3aff41aa05679d03618f3ef279c6221de0c0de6f744b65e0e040438a8fcd4f9545b2c6407d6bcd8e4855cb7640ef62025adda9be7b1b5b83c68300b429032f43e64e5322707a05579b38d34587d04bc604081bf4a06091777516b231a5222a0938d7355f94e52f6e2ed2e8670bff1556c0036508ded72570dbb793f8b8c625e0eed39a2bd4d99030e00eb5781c954b675501617d111a0a4b913237a2e086d6282a9e33ec4e0785215a1d4bbcdabb4a6ffbf1c19b526bb19fadcfdbd297255ace7e2e3aa04192d461e109f93b075b4a95479c13513722f65eae201731fe9961f8cab3b2fe5ce88b786306a734b09bf19cb3ab54ccd43bcb3a074d6e84da54816a1a487f2e6fe3eee7c162644072dc996cc73b278d33c6da29ea5a0ddcbcff8f51b091831183c754d323fdb7a3a7ae38da74742579effc3105e3a9f9611efffeac8ac4539c2c1891531c09ea2d621fbb70c75b86d18a26428482cad4d2ef960b6fd8e64373ef6f6701aa4d3efbe4ba9ca66f9af1c9f77782f840e69911df51b733af2a8317bf256ec626b1b40ba1e72494abd95cbec1b9774425189c24b8d03caa25e35603d1360c7ee787ecdcbfc7ce214d35b0c84c4afde70c26f15f6c4d49827d1f774958343d9eb3286ae7246fad2700b6072dfb934f04bb74f652c639e6cd7c84d2e63a83016df85e1c192d1c55f977a7c75038dc9a7d9df6679b810469293b0035dc1ae77e36a4b2e1894bce8f7751dd27408fed27f18ff7036a074ac430ed9db8bbe48f645051148a9f1b0796a05b35b25687153c22abbe4b4fab20715b302b234c2bd6fb81cdf6f05d6baf0e9ffc1716c612085ee8bf2d824837558e370b197900b5750cdbd4f894e480eacfe350a4cb3b9599ba803a5c0fc73a5ba8e9501411ad91ee0ea4591bfef086ddac43a4e75eebfb63a26cc0d26ad3aec5976798e3b4243d65ad8a05cb2c5d413c3bb6561794cd8705c468a70c2626d7c9f45366d343671a7da55c7375224b5a336c8897e71851721f2422d01421cdfa3a306f96d211a1eb7099b18d229bc3563a0111ef12243a62d20f1a0a62f829354de28537bf4ab900478f7e19a47ded9e42ceb2b10993287b4b3be5a90ab1da2a0aaef46ddd967577f2026c5f7f9c55430ecce3401646a5a289bd148329ebf1f562d86ebf6632fb644d815575b0338898481e96b1b877ef37ce70c1dd3b5c8ed2d2b10daef1d46ef36cbae5801f7b96b787881ede1a52eb6a3d990e93221287d2c5719ca62457e03e3fedb3f017ba75b91ff163d7d4b7c1607227aafb54de06e73130e2305a186eb8faa70727f460b9a9e49e5af01b8307d08a6fa1dfba595927d35cb200f15ea7915f6bf216dac238f5a1ee6d769976b14187f83ef0731681e337f64ad01b2fd586fe0b4cce5db10103a79be7a8f2a0efd7fdf36576b72167b283eb5fd3963d04ff0debd5df17921b51c97e92aa644601367a98843fa8fd9d3b541a7fdb7282f566d79ba35a69edf1295760296d4303c179bfc96b5022704217c94873bbd9d637f4d97e9c28ac87476a5fa02f48105c6dd1cfb3f240427e159fca32570d2e64ecb1504f2c14ac9e74bae8ab22d25339d1cb3306212575445f7578aadd701dcb788ad52fb0ec27de65175f48f330a2148b8deb48035726e981aa80940a1c1cdeaeac3ed435f91c6b9d7f5096223fe5538e26ed9b6cdd4dcd7571465c744b465802d6fff0d61ec8aa6a52e353f3f1b8b21beba74f44909e4bdbe9b3b9ef239e608e37ef6f41116808cde2b0224cd9208e22df6e62faab7fe58e63a04286486208e03c11b0f1eaa2dd462036b75490dd706702174364a83838b3cfbaf072f580138a127d4a676a32f2531e2e2d93e1eeb3a95d99644c3c15199745572a8e4f8a1f89f028080a27f0000000000000000000000000000000100000000000000000000000000000002558800057b23285c0c90830f42408800000002540be40001b860ac4f4597ef563d4302ca703c25719dd6ad159331c8cb7ee6199936aed92ae940feb2a6c6f8826f2f9e862ce241d5ca72d44c9acb1fa8b53705504a66eb87f781bf76c91e8fce3c7fb158847df2e8a8d053476db8e420fd38d9e4841ec1da0f04"));
        BigInteger tdAt1023761 = BigInteger.valueOf(62_284_797);

        AionBlock block1023762 =
                new AionBlock(
                        Hex.decode(
                                "f90791f9078d01830f9f12a099897e16c63c55be270639a462c5bf3a9248b0a407a9a6bbc9ec3ef99cc92819a0a0d75ca161e901ff63be33cc0ea3efda4a7609c74ba4bd1342db2a6edba5528ea0a0bc25eced56d45059167f493187c5b598c5e11fdb29ea14c8bdfdb0538f998fa045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0a045b0cfc220ceec5b7c1c62c4d4193d38e4eba48e8815729ce75f9c0ab0e4c1c0ba041494f4e000000000000000000000000000000000000000000000000000000008083e4cd09845bf4bd26a08555e3e6807bbf9d40b2808b8e2e9a52b7763be9352286c0cd5c00bc59079049b905800087acd294939168af04783e4f27db1744479c27b78916e267ff2d324a392b3c6c718071e6dcdabbb3fd5996023c6b216587a043e9fcf20fc0918f0ad7c520e24024185b38ac4675f90f5fb70740c7216b6fe560dbe42bfd0a670c7e3e24b535967c0f2ddf7df926797f9eeb492475be2a5605ad82b939578482708bacdf38e063f449bf0cd45a41f57a00576af7dc135bdcf35804c7b85567b81169949405b1f7569bd3d9148e7f02ead19b360c08da008fbbb12f5402b3dd04ed1184a61777e359bc3cb8051e3797937b2cd5ba3b56251f6f3cd0d275a4e5a0780a1e13fd551a9c8f833cb7197596fa4efd2a7784b6aa794ed7b6cf18e71d6a75a692529c1ec726ed9bebfc7ee901625287f1d53fbb9622e40e66834a9cec2b7c7697a10adbd2c0a101c6f733a5c528fe399d21c67dd76d13b9055d8c1f25257ffc68cfa683c166a04dfab72a74531a18c53e6cede64bd4bf485e239d418f5baa4b187f843000d0be277b4316bcb0ff2c3804cac055da313aff96f90a8758567c8263de79b7865058db6faaddc8847832760d0865018b26f8751f40a44bf8d24aeaf8dac6fd22381c102a35d1060d142dab386dd5ea2aaf6a732cfe03db05875bb99fa13e2859cce9196324cfc8549ab3b967da09e33357b7a705e9fb8b5037db9f202c661381dede93114d7bd6fd623ec9679dab2778a3ebf47a1dfb706c712fbfb390bb53ce3f78df31613dff4f43ed8cf93aa2980265b759ffc2660bb136ef11a29f0893d9b7c16beed10b28c7ad53e1bb892c91d2663836757866cb67f95a4211dbeea79b44a6f75b763e372c9b06126624e6d9788a3bb2a9633349a05d3d5a04a2133ff1238adcfafdd4bc0d5784d8b4210a165ef8ae195cb909c31a0e1dea6bf51f1e06fc8aa4ea835af56743773f02188c64b277550318bcfca24ca434db9c62ed909d4b759bb9d1a73f5b894fe62258e42a538ebec92a5cd75e54e206a213b1dc3e00f38fbf2e1287a64db1c83d08b6d648853eca6b8eda0523e917ca90b124e555c89b21ab02c8ff1bccfeea650e01b75749d81a3f3c9bf95c95119f445b5efb734f741374966f27e4ade0f1d89c1a9bd5988d821e5c74752d0b9bd9f89635433dbd0c8f22f5fa88a3a84fe9e405b00f176a6446c21475beda1b264b571f75237b7b3fc288136bd5064bd2eedf6d06622483a6469c14ff573972424954cd727cbaab646d906c7227e33d735dbd7efd11ce03eeeac0a80241717f3d6a22563210fcf5ba425fd3cf0b18fa44ac6862956489d128b2613489d3ea6f1442f223947ef01d260b586f5d585cb57b810d2888973a49144a0cdb3d53c718c7a30fac886f627968da77f879c9850f1e9aea1c2ca568f8c60e6d612634194a29d3381e24149143fd1226458e2b861f5d6dbe79add9c56075ef5217b83dd7f78961d2a7b23042521df30ab946fdfd1c2619b637b113cad00b7520402041ce3fc4d2eed0ed652201820e89c35e1c4ff9dbbe14da8185e3b33ac85ba698531cc3ae5ea88fc7ffd79888b3feb9aa0a15c1b37df7242652ed33c6daf9b111f573f9a25353e8c523f849f6349bff6f4594eee5ac1b59922c5bf029fed78e3d0fa9037e156b53e813303b3ac449cc0df58d1d1c0dba6c3316c9a35883b5d17f3f097a1ed417d3ce092a60e6d0f1048a87471e92b540ba01b22eaa20ec43d5e122bc0b874d8fafd4f5379b54bde4ae94bc37a3de1cbf223917f303720973f3012dd090cb9a207e19c2e6b7a6f860541e06840b06c97c34ecfacd7fa555bb3a0f9ef157bdfec10f4d7246ef3316f07731e32369114b40d458ab37439425219e9a5075cc9ca40734414d6628c6dbebd637bf80157254d91c6993f3ff21af32216299e118ed276be4446bd43677ed771a58a65bcd8ad9673997f98f6c76b4332880460137a68076392b0345c4726452c810a4f1735145aa4d7ed8b77ba6aded5c616e19ad8126aef4f4fecbc0"));
        BigInteger tdAt1023762 = BigInteger.valueOf(62_284_869);

        byte[] trieDataAt1023762 = Hex.decode(hexEncodedStateData("masteryStateAt1023762.txt"));

        // block to import
        AionBlock block1023763 =
                new AionBlock(
                        Hex.decode(
                                "f90837f9079001830f9f13a0d23ab2e61a9ef3f4d820a13bad7d6e0507139b0f6badebdd7a76f7dd2c07dc95a0a08fc457b39b03c30dc71bdb89a4d0409dd4fa42f6539a5c3ee4054af9b71f23a0e80d01bf7d1b76253e75c4fa1bf25295cfb743391e215c1d5208d2a3e1faed0ca02aef673169ab46917cde72e3ddc0ca2c30671ab73f2b78635f4423f73d987302a04463417d369f5d9a5798c15a691b8118b1a4951a9d50ae35e3a989eef2fcd6afba041494f4e000000000000000000000000000000000000000000000000000000008303af2283e5063c845bf4bd34a09a84689aa205b90bf5e9733be1d8fdea97f979112bd25d191cd377f8217e745ab90580002aead215792f87b7c7de5535769a6e1800e371f8102a29a3415504fce41d51c5372222d906e8b8ff2ef086171f6d4673caaa50f5766d1c990fd57c9b71de6fefca724407d99e5b7c14f2c4cd879977875e7d66b03be6c6048897808ef17d5ee053d436e47b8171487e40a375b105222353bd023f3927555347c77ab6f887fb256398ee04d14cbb367223739f1e2013fb9672bcd1f358cbd6f821baaa928b664597a7101f3ee5091a8e4c655a73357e0141ef1d1b2a0894bf059d0b5723b5cfe9c05ced18b73f659dfaefd915722ea42f7a61fe7a62b938b0fa76c804f446e9267d865ebfff0837904ad71467796932ebf12b70acc50ca43106ffd95767ab47641fe872c7b286ae02a463b839aea2fb7c1b7b11ecb0907a411edd67e75c3ddc02497647d9bfb39c1265f9d6693f99bee669169f11617f1d4741936eff926d16c3af8c5d91df767f22c332bdb0e08cc36a639f15c94b73e2ef72a5f99d58b01d003648541b7cdd7c7a88272b7dade38c87470a7efca90ae589ba0202ba04bb00632797f1378d48c05f6cdf510aea3b4601d4c03ad679ea17832a26d232a0aa9452b53ccb87398b9431b0f464915bce3e6360fa4fd86d750c02b84142bc65f88f6afc9e1c8910d6b5d31e81d190d404051723ad76d955a35b4d29e3d662d9eb08a2eccb750872e1fbab15971121bef4a9996fb1664b131d718ea10ee55dfec784159c2153512a59e5518c999fc53c2e92032c7d2449242e0cb27068067ef9fe5479cce3f588ac03b63a9bb84a921039fc7f304f59ddf7d54ebc6020b3054ccfbfeb128efcd6c9c91c1df92cc74342c81a374a0b78f0acc2ac66ccba90ee76a16a2a02b7df902cebed114492c85102d5ee95f91f2e7e4d5f577d36e5bd34a64244c9c65199ad5bfcfe1650876dd33ef925c1bc05631c2817bca895b490701cc7397cebab34f5545c387cb635c66b9951a387d1fb1318521ab9dd79d68fc7ffe4e3002cce404a829410cae1204b0716d00c69ae857e8daa04e8923e3a353495700de2140a2df938b81e41b957ff0a5f1154a3a982a2aab2df0f12d08d1b03385871205918b4bcedbd39b4bae88a9e2a11a701630b0926b0260f015173938996498319f56707613ba818026b53ba9cdf4bcada79725b8e2afd822e73b423de17bd3d8975ebf32565777042b2fc70ff916e8d7202875f0d376037a91630213f14c9c85721efd15739e5575ac374113716dfe8016b2c481214fab023ff4076d346184a9bcfbb7bb5ff1d1470a7a327ef853e4c323fd76381d9697fc7b30a8f08a8743255d3985af14e420a5cdd2a060b8273ff63783d05cbde399607e623a05b5302fdf83449553c31c753083b63e3b9b215ac1d7be919b399f8fa14a3e8af169f110ec4fd53087ae76fa6159c8a5a97549cb08b78d88e24f0c6ff5e0ccad9f7e0512dd3bbfed1b416b3f93d586f751ee408ba896d31da6a8195633c5f8aefddf0af8904301d772f4251d5a517032266d927ce25afb5718cf81683c67362074ad87a9f46382e511697d8d775ae287d04f7bfd114d3b176bf490f803866a8a7298690a8eb4b08c308a0ef988133a4b4472236b7f03768f4782f3cc60dafef80c4a59e8b1f9a551a7838c04c73de41a63e0b729067a026e8b088ba2fad7f62a79bfe9a643eaffdcd0dee7581e3f4a444ed53b82f8843e548a309b52a8f9c142e610c20a160345a26c7b8a57b121fed0ec7fe66a90636a42215c15af76e2ad00eca7e3f9892e5be2b4da71f0479eb05c3c65fbac5866fe25ba15cf805c6228b3c10ccab90b4e94feaaf57854c4b9642d906f3f21be25920bb877f9a953235bf463b4372f3d5efe91a74f51c3a0bb7cab840c59f77deb3931616aa701a7292cb294d6f227bdff3652252859d188439d233cf1bcc5214b65b0b23bdc6bb9cd2db47fe3b95357c7deccd2eeb2cfe951b5a8f378c437a3ccda981d376d73623fcd7edd8b9ceabf8a2f8a0038080a37f000000000000000000000000000000010000000000000000000000000000000280558800057b23285c16a5830f42408800000002540be40001b860ac4f4597ef563d4302ca703c25719dd6ad159331c8cb7ee6199936aed92ae94049ee7d83aa0bba5d597259bd98049d628c5c1b87f6427f7716f8a0a4db578bb5c5ade67c6f803d885b941ba6305aa1517dddd84766ce1900e5efa7f0f5b3e40a"));

        // setup blockchain with state before imported block
        StandaloneBlockchain blockchain =
                new Builder()
                        .withState(
                                block1023761,
                                tdAt1023761,
                                block1023762,
                                tdAt1023762,
                                trieDataAt1023762)
                        .withAvmEnabled()
                        .build()
                        .bc;

        // import block
        Pair<ImportResult, AionBlockSummary> results =
                blockchain.tryToConnectAndFetchSummary(block1023763);
        assertThat(results.getLeft()).isEqualTo(ImportResult.IMPORTED_BEST);

        // collect the consensus information from the block & receipt.
        AionBlockSummary blockSummary = results.getRight();

        // check the receipt
        AionTxReceipt receipt = blockSummary.getSummaries().get(0).getReceipt();
        assertThat(receipt.isSuccessful()).isTrue();
        assertThat(receipt.getEnergyUsed()).isEqualTo(241_442);
        assertThat(receipt.getPostTxState())
                .isEqualTo(
                        Hex.decode(
                                "c5dc46570782ee487a614566ad2fdf7af42cd084ccdf39ff4d8cc1d5caf32937"));

        byte[] stateRoot = blockSummary.getBlock().getStateRoot();
        byte[] blockReceiptsRoot = blockSummary.getBlock().getReceiptsRoot();
        byte[] receiptTrieEncoded = receipt.getReceiptTrieEncoded();

        // verify the consensus information.
        String expectedRoot = "e80d01bf7d1b76253e75c4fa1bf25295cfb743391e215c1d5208d2a3e1faed0c";
        String expectedReceiptsRoot =
                "4463417d369f5d9a5798c15a691b8118b1a4951a9d50ae35e3a989eef2fcd6af";
        String expectedReceiptsTrie =

        assertThat(stateRoot).isEqualTo(Hex.decode(expectedRoot));
        assertThat(blockReceiptsRoot).isEqualTo(Hex.decode(expectedReceiptsRoot));
        assertThat(receiptTrieEncoded).isEqualTo(Hex.decode(expectedReceiptsTrie));
    }

    private static final String userDir = System.getProperty("user.dir");
    private static final String moduleDir = "modAionImpl";
    private static final String testResourceDir = "test_resources";

    public static final File TEST_RESOURCE_DIR =
            userDir.contains(moduleDir)
                    ? new File(userDir, testResourceDir)
                    : new File(userDir, moduleDir + File.separator + testResourceDir);

    /** Extracts raw trie data from a test resource file. */
    public static String hexEncodedStateData(String rawDataFile) {
        File file = new File(TEST_RESOURCE_DIR, rawDataFile);

        BufferedReader reader = null;

        try {
            reader = new BufferedReader(new FileReader(file));
            String text;

            while ((text = reader.readLine()) != null) {
                return text;
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return "";
    }
}
